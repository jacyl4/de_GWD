#!/bin/bash
clear
RED='\E[1;31m'
GREEN='\E[1;32m'
YELLOW='\E[1;33m'
BLUE='\E[1;34m'
PURPLE='\E[1;35m'
CYAN='\E[1;36m'
WHITE='\E[1;37m'
cRES='\E[0m'



installCER(){
CFapikey=$(jq -r '.FORWARD.APIkey' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
CFemail=$(jq -r '.FORWARD.Email' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
domain=$(jq -r '.FORWARD.domain' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
topDomain=$(echo $domain | rev | awk -F. '{print $1"."$2}' | rev)

[[ -f "/etc/nginx/conf.d/80.conf" ]] && sed -i "/server_name/c\server_name $domain;" /etc/nginx/conf.d/80.conf
sed -i "/server_name/c\server_name $domain;" /etc/nginx/conf.d/default.conf
jq --arg serverName "$domain" '.address.serverName = $serverName' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
chmod 666 /opt/de_GWD/0conf

cat << "EOF" >/var/www/ssl/update_ocsp_cache
#!/bin/bash
ocsp_uri=$(openssl x509 -noout -ocsp_uri -in /var/www/ssl/*.cer)
intermediate_no=$(echo $ocsp_uri | cut -d/ -f3 | cut -d. -f1)
wget --show-progress -cqO /var/www/ssl/intermediate.pem https://letsencrypt.org/certs/2024/$intermediate_no-cross.pem
wget --show-progress -cqO /var/www/ssl/root.pem https://letsencrypt.org/certs/isrgrootx1.pem

cat /var/www/ssl/intermediate.pem >/var/www/ssl/bundle.pem
cat /var/www/ssl/root.pem >>/var/www/ssl/bundle.pem

openssl ocsp -no_nonce \
    -issuer  /var/www/ssl/intermediate.pem \
    -cert    /var/www/ssl/*.cer \
    -CAfile  /var/www/ssl/bundle.pem \
    -VAfile  /var/www/ssl/bundle.pem \
    -url     $ocsp_uri \
    -respout /var/www/ssl/ocsp.resp

systemctl force-reload nginx >/dev/null
EOF
chmod +x /var/www/ssl/update_ocsp_cache

if [[ $(/var/www/ssl/update_ocsp_cache | awk 'NR==1{print$2}') != "good" ]]; then
rm -rf /var/www/ssl/*.cer
rm -rf /var/www/ssl/*.key
find /var/www/ssl/*.pem | grep -v "dhparam.pem" | xargs -I {} rm -rf {}
cat << EOF >/var/www/ssl/ocsp.resp
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 00
EOF

crontab -l 2>/dev/null >/tmp/now.cron
sed -i '/acme.sh/d' /tmp/now.cron
crontab /tmp/now.cron
rm -rf /tmp/now.cron
rm -rf "/root/.acme.sh"

sed -i '/ssl_trusted_certificate/d' /etc/nginx/conf.d/.ssl_certs
sed -i '/ssl_stapling/d' /etc/nginx/conf.d/.ssl_certs
sed -i '/ssl_stapling_verify/d' /etc/nginx/conf.d/.ssl_certs
sed -i '/ssl_stapling_file/d' /etc/nginx/conf.d/.ssl_certs
sed -i '/ssl_early_data/d' /etc/nginx/conf.d/.ssl_certs
sed -i '/proxy_set_header/d' /etc/nginx/conf.d/.ssl_certs
cat << EOF >>/etc/nginx/conf.d/.ssl_certs
ssl_stapling on;
ssl_stapling_verify on;
ssl_stapling_file /var/www/ssl/ocsp.resp;
ssl_trusted_certificate /var/www/ssl/bundle.pem;
ssl_early_data on;
proxy_set_header Early-Data \$ssl_early_data;
EOF

export CF_Key="$CFapikey"
export CF_Email="$CFemail"

curl https://get.acme.sh | sh
"/root/.acme.sh"/acme.sh --force --upgrade  --auto-upgrade
"/root/.acme.sh"/acme.sh --force --set-default-ca  --server letsencrypt
"/root/.acme.sh"/acme.sh --force --issue --dns dns_cf -d $topDomain -d *.$topDomain -k ec-256 --dnssleep 180
"/root/.acme.sh"/acme.sh --force --installcert -d $topDomain \
               --key-file       /var/www/ssl/de_GWD.key  \
               --fullchain-file /var/www/ssl/de_GWD.cer \
               --reloadcmd     "chmod 644 /var/www/ssl/*.key && systemctl force-reload nginx" \
               --ecc
fi

/var/www/ssl/update_ocsp_cache

[[ -d "/opt/de_GWD/vtrui" ]] && systemctl restart vtrui
[[ -d "/opt/de_GWD/vtrui1" ]] && systemctl restart vtrui1
[[ -d "/opt/de_GWD/coredns" ]] && systemctl restart coredns
[[ -d "/opt/de_GWD/RproxyS" ]] && systemctl restart RproxyS

echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}Generate & Deploy TLS Certificate${cRES}"
}



resetCER(){
mkdir -p /var/www/ssl && cd /var/www/ssl

openssl req -x509 -nodes -days 3650 \
  -subj "/C=CA/ST=QC/O=Company, Inc./CN=localhost.com" \
  -config <(cat /etc/ssl/openssl.cnf \
    <(printf '[SAN]\nsubjectAltName=DNS:localhost')) \
  -newkey rsa:2048 \
  -keyout de_GWD.key \
  -out de_GWD.cer
  
rm -rf /var/www/ssl/*.cer
rm -rf /var/www/ssl/*.key
rm -rf /var/www/ssl/*.pem
rm -rf /var/www/ssl/ocsp.resp
cat << EOF >/var/www/ssl/ocsp.resp
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 00
EOF

crontab -l 2>/dev/null >/tmp/now.cron
sed -i '/acme.sh/d' /tmp/now.cron
crontab /tmp/now.cron
rm -rf /tmp/now.cron
rm -rf "/root/.acme.sh"

sed -i '/ssl_trusted_certificate/d' /etc/nginx/conf.d/.ssl_certs
sed -i '/ssl_stapling/d' /etc/nginx/conf.d/.ssl_certs
sed -i '/ssl_stapling_verify/d' /etc/nginx/conf.d/.ssl_certs
sed -i '/ssl_stapling_file/d' /etc/nginx/conf.d/.ssl_certs
sed -i '/ssl_early_data/d' /etc/nginx/conf.d/.ssl_certs
sed -i '/proxy_set_header/d' /etc/nginx/conf.d/.ssl_certs

systemctl force-reload nginx
echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}Remove TLS Certificate${cRES}"
}



start_menu(){
    echo -e "${GREEN}=============================== ${cRES}"
    echo -e "${GREEN}     Domain & Certificate${cRES}"
    echo -e "${GREEN}=============================== ${cRES}"
    echo -e "${GREEN}1. Generate TLS Certificate${cRES}"
   echo -e "${YELLOW}2. Reset TLS Certificate${cRES}"
    echo ""
    read -p "Select:" num
    case "$num" in
    1)
    installCER
    start_menu
    ;;
    2)
    resetCER
    start_menu
    ;;
    *)
    clear
    echo -e "${RED}Wrong number${cRES}"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu