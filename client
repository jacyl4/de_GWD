#!/bin/bash
clear
RED='\E[1;31m'
GREEN='\E[1;32m'
YELLOW='\E[1;33m'
BLUE='\E[1;34m'
PURPLE='\E[1;35m'
CYAN='\E[1;36m'
WHITE='\E[1;37m'
cRES='\E[0m'

chmod 777 /tmp
architecture=$(dpkg --print-architecture)
export DEBIAN_FRONTEND=noninteractive
TTYD_Ver="1.7.3"
branch="main"


installCMD=`cat << EOF
bash <(wget --no-check-certificate -qO- https://ghproxy.net/https://raw.githubusercontent.com/jacyl4/de_GWD/main/client)
EOF
`

if [[ $architecture = "arm64" ]];then
chnAPTsource="mirrors.tuna.tsinghua.edu.cn"
elif [[ $architecture = "amd64" ]]; then
chnAPTsource="mirrors.aliyun.com"
fi

pkgDEP1(){
if [[ $architecture = "arm64" ]];then
unset Freeze_Package
Freeze_Package+=($(dpkg -l | grep 'linux-u-boot-' | awk '{print $2}'))
Freeze_Package+=($(dpkg -l | grep 'linux-image-' | awk '{print $2}'))
Freeze_Package+=($(dpkg -l | grep 'linux-headers-' | awk '{print $2}'))
Freeze_Package+=($(dpkg -l | grep 'linux-dtb-' | awk '{print $2}'))
echo ${Freeze_Package[@]} | xargs -n1 apt-mark hold
apt update && apt install apparmor apparmor-utils google-perftools
fi

[[ -n $(dpkg -l | awk '{print$2}' | grep '^ipset$') ]] && apt remove --purge ipset
[[ -n $(dpkg -l | awk '{print$2}' | grep '^haveged$') ]] && apt remove --purge haveged
[[ -n $(dpkg -l | awk '{print$2}' | grep '^os-prober$') ]] && apt remove --purge os-prober
[[ -n $(dpkg -l | awk '{print$2}' | grep '^systemd-timesyncd$') ]] && apt remove --purge systemd-timesyncd

unset aptPKG
[[ -z $(dpkg -l | awk '{print$2}' | grep '^sudo$') ]] && aptPKG+=(sudo)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^wget$') ]] && aptPKG+=(wget)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^curl$') ]] && aptPKG+=(curl)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^git$') ]] && aptPKG+=(git)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^locales$') ]] && aptPKG+=(locales)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^netcat-openbsd$') ]] && aptPKG+=(netcat-openbsd)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^lsof$') ]] && aptPKG+=(lsof)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^dnsutils$') ]] && aptPKG+=(dnsutils)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^net-tools$') ]] && aptPKG+=(net-tools)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^resolvconf$') ]] && aptPKG+=(resolvconf)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^nftables$') ]] && aptPKG+=(nftables)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^ca-certificates$') ]] && aptPKG+=(ca-certificates)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^apt-transport-https$') ]] && aptPKG+=(apt-transport-https)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^gnupg2$') ]] && aptPKG+=(gnupg2)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^unzip$') ]] && aptPKG+=(unzip)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^zstd$') ]] && aptPKG+=(zstd)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^jq$') ]] && aptPKG+=(jq)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^bc$') ]] && aptPKG+=(bc)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^moreutils$') ]] && aptPKG+=(moreutils)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^rng-tools-debian$') ]] && aptPKG+=(rng-tools-debian)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^chrony$') ]] && aptPKG+=(chrony)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^irqbalance$') ]] && [[ $(nproc --all) -gt 1 ]] && aptPKG+=(irqbalance)
[[ -n $aptPKG ]] && apt update && apt install $(echo ${aptPKG[@]})
}

pkgDEP2(){
curl -fsSL https://download.docker.com/linux/debian/gpg | install -m 0644 -D /dev/stdin /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1) stable" >/etc/apt/sources.list.d/docker.list


unset aptPKG
[[ -z $(dpkg -l | awk '{print$2}' | grep '^python3-toml$') ]] && aptPKG+=(python3-toml)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^psmisc$') ]] && aptPKG+=(psmisc)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^dns-root-data$') ]] && aptPKG+=(dns-root-data)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^idn2$') ]] && aptPKG+=(idn2)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^ethtool$') ]] && aptPKG+=(ethtool)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^tmux$') ]] && aptPKG+=(tmux)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^socat$') ]] && aptPKG+=(socat)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^zip$') ]] && aptPKG+=(zip)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^docker-ce$') ]] && aptPKG+=(docker-ce)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^php7.4-fpm$') ]] && aptPKG+=(php7.4-fpm)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^php7.4-cgi$') ]] && aptPKG+=(php7.4-cgi)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^php7.4-sqlite3$') ]] && aptPKG+=(php7.4-sqlite3)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^php7.4-xml$') ]] && aptPKG+=(php7.4-xml)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^php7.4-intl$') ]] && aptPKG+=(php7.4-intl)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^php7.4-json$') ]] && aptPKG+=(php7.4-json)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^sqlite3$') ]] && aptPKG+=(sqlite3)
[[ -z $(dpkg -l | awk '{print$2}' | grep '^libmimalloc2.0') ]] && aptPKG+=(libmimalloc2.0)
[[ -n $aptPKG ]] && apt update && apt install $(echo ${aptPKG[@]})
}

checkSum(){
sha256sumL=$(sha256sum $1 2>/dev/null | awk '{print$1}')
if [[ $sha256sumL = $2 ]]; then 
  echo "true"
elif [[ $sha256sumL != $2 ]]; then
  echo "false"
fi
}



preDL(){
mkdir -p /opt/de_GWD
mkdir -p /opt/de_GWD/.repo

sha256sum_IPchnroute=$(curl -fsSLo- https://ghproxy.net/https://raw.githubusercontent.com/jacyl4/chnroute/main/IPchnroute.sha256sum)
if [[ -n $sha256sum_IPchnroute ]] && [[ $(checkSum /opt/de_GWD/.repo/IPchnroute $sha256sum_IPchnroute) = "false" ]] ; then
rm -rf /tmp/IPchnroute
wget --no-check-certificate --show-progress -cqO /tmp/IPchnroute https://ghproxy.net/https://raw.githubusercontent.com/jacyl4/chnroute/main/IPchnroute
[[ $(checkSum /tmp/IPchnroute $sha256sum_IPchnroute) = "false" ]] && echo -e "${WHITE}IPchnroute${RED} Download Failed${cRES}" && exit
[[ $(checkSum /tmp/IPchnroute $sha256sum_IPchnroute) = "true" ]] && mv -f /tmp/IPchnroute /opt/de_GWD/.repo/IPchnroute
fi

if [[ -f "./de_GWD_$architecture.zip" ]]; then
    mv -f ./de_GWD_$architecture.zip /opt/de_GWD/.repo/de_GWD.zip
else
    sha256sum_de_GWD=$(curl -fsSLo- https://ghproxy.net/https://raw.githubusercontent.com/jacyl4/de_GWD/main/de_GWD_"$architecture".zip.sha256sum)
    if [[ -n $sha256sum_de_GWD ]] && [[ $(checkSum /opt/de_GWD/.repo/de_GWD.zip $sha256sum_de_GWD) = "false" ]]; then
    rm -rf /tmp/de_GWD.zip
    wget --no-check-certificate --show-progress -cqO /tmp/de_GWD.zip https://ghproxy.net/https://raw.githubusercontent.com/jacyl4/de_GWD/main/de_GWD_"$architecture".zip
    [[ $(checkSum /tmp/de_GWD.zip $sha256sum_de_GWD) = "false" ]] && rm -rf /tmp/de_GWD.zip && wget --no-check-certificate --show-progress -cqO /tmp/de_GWD.zip https://de-gwd.accxio.workers.dev/de_GWD_"$architecture".zip
    [[ $(checkSum /tmp/de_GWD.zip $sha256sum_de_GWD) = "false" ]] && echo -e "${WHITE}de_GWD Zip${RED} Download Failed${cRES}" && exit
    [[ $(checkSum /tmp/de_GWD.zip $sha256sum_de_GWD) = "true" ]] && mv -f /tmp/de_GWD.zip /opt/de_GWD/.repo/de_GWD.zip
    fi
fi

[[ -z $(unzip -tq /opt/de_GWD/.repo/de_GWD.zip | grep "No errors detected in compressed data") ]] && echo -e "${WHITE}de_GWD Zip${RED} Download Failed${cRES}" && exit

cat << "EOF" >/opt/de_GWD/tcpTime
#!/bin/bash
echo
date -s "$(curl -sI aliyun.com| grep -i '^date:'|cut -d' ' -f2-)"
[[ $? -ne "0" ]] && date -s "$(wget -qSO- --max-redirect=0 --dns-timeout=3 baidu.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w
echo
EOF
chmod +x /opt/de_GWD/tcpTime
/opt/de_GWD/tcpTime
}



repoDL(){
echo -e "${WHITE}[...]\c" && echo -e "\t${WHITE}Repo Download${cRES}\r\c"
sha256sum_nginx=$(curl -fsSLo- https://raw.githubusercontent.com/jacyl4/de_GWD/$branch/resource/nginx/nginx_"$architecture".sha256sum)
sha256sum_nginxConf=$(curl -fsSLo- https://raw.githubusercontent.com/jacyl4/de_GWD/$branch/resource/nginx/nginxConf.zip.sha256sum)
sha256sum_client=$(curl -fsSLo- https://raw.githubusercontent.com/jacyl4/de_GWD/$branch/resource/client/Archive.zip.sha256sum)

if [[ $(checkSum /usr/sbin/nginx $sha256sum_nginx) = "false" ]]; then
rm -rf /tmp/nginx
wget --show-progress -cqO /tmp/nginx https://raw.githubusercontent.com/jacyl4/de_GWD/$branch/resource/nginx/nginx_"$architecture"
[[ $(checkSum /tmp/nginx $sha256sum_nginx) = "false" ]] && echo -e "${WHITE}NGINX Core${RED} Download Failed${cRES}" && exit
[[ $(checkSum /tmp/nginx $sha256sum_nginx) = "true" ]] && mv -f /tmp/nginx /usr/sbin/nginx && chmod +x /usr/sbin/nginx
fi

if [[ $(checkSum /opt/de_GWD/.repo/nginxConf.zip $sha256sum_nginxConf) = "false" ]]; then
rm -rf /tmp/nginxConf.zip
wget --show-progress -cqO /tmp/nginxConf.zip https://raw.githubusercontent.com/jacyl4/de_GWD/$branch/resource/nginx/nginxConf.zip
[[ $(checkSum /tmp/nginxConf.zip $sha256sum_nginxConf) = "false" ]] && echo -e "${RED}Download Failed${cRES}" && exit
[[ $(checkSum /tmp/nginxConf.zip $sha256sum_nginxConf) = "true" ]] && mv -f /tmp/nginxConf.zip /opt/de_GWD/.repo/nginxConf.zip
fi

if [[ $(ttyd -v 2>&1 | grep -o '[0-9]\.[0-9]\.[0-9]') != $TTYD_Ver ]]; then
wget --show-progress -cqO /tmp/ttyd https://github.com/tsl0922/ttyd/releases/download/$TTYD_Ver/ttyd.$(uname -m)
[[ $? -ne 0 ]] && echo -e "${WHITE}TTYD${RED} Download Failed${cRES}"
[[ $(du -sk /tmp/ttyd 2>/dev/null | awk '{print$1}') -gt 1000 ]] && mv -f /tmp/ttyd /usr/bin/ttyd && chmod +x /usr/bin/ttyd && TTYD_UPDATE="true"
fi

if [[ $(checkSum /opt/de_GWD/.repo/client.zip $sha256sum_client) = "false" ]]; then
rm -rf /tmp/client.zip
wget --show-progress -cqO /tmp/client.zip https://raw.githubusercontent.com/jacyl4/de_GWD/$branch/resource/client/Archive.zip
[[ $(checkSum /tmp/client.zip $sha256sum_client) = "false" ]] && echo -e "${WHITE}Client Zip${RED} Download Failed${cRES}" && exit
[[ $(checkSum /tmp/client.zip $sha256sum_client) = "true" ]] && mv -f /tmp/client.zip /opt/de_GWD/.repo/client.zip
fi

localVer=$(awk 'NR==1' /opt/de_GWD/.repo/version.php 2>/dev/null)
remoteVer=$(curl -fsSLo- https://raw.githubusercontent.com/jacyl4/de_GWD/main/version.php | head -n 1)

if [[ $localVer != $remoteVer ]] || [[ ! -f '/opt/de_GWD/.repo/version.php' ]]; then
rm -rf /opt/de_GWD/.repo/version.php
wget --show-progress -cqO /opt/de_GWD/.repo/version.php https://raw.githubusercontent.com/jacyl4/de_GWD/main/version.php
[[ $? -ne 0 ]] && echo -e "${WHITE}Version file${RED} Download Failed${cRES}" && exit
fi

echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}Repo Download${cRES}"
}



cleanDep(){
echo -e "${WHITE}[...]\c" && echo -e "\t${WHITE}Clean-up${cRES}\r\c"
service cron stop

sed -i "/nfsvers/d" /etc/fstab >/dev/null 2>&1
sed -i '/quic/d' /etc/nginx/conf.d/*.conf >/dev/null 2>&1

[[ $(jq '.v2nodeDIV.nodeSM' /opt/de_GWD/0conf) = "[]" ]] && jq '.v2nodeDIV.nodeSM={}' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
[[ $(jq '.v2nodeDIV.nodeDT' /opt/de_GWD/0conf) = "[]" ]] && jq '.v2nodeDIV.nodeDT={}' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
[[ $(jq '.v2nodeDIV.nodeCU' /opt/de_GWD/0conf) = "[]" ]] && jq '.v2nodeDIV.nodeCU={}' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf

[[ -n $(jq '.v2nodeDIV.nodeCU.custom' /opt/de_GWD/0conf | grep -v '^null$') ]] && jq 'del(.v2nodeDIV.nodeCU.custom)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
[[ -n $(jq '.v2nodeDIV.nodeDT.divert' /opt/de_GWD/0conf | grep -v '^null$') ]] && jq 'del(.v2nodeDIV.nodeDT.divert)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
[[ -n $(jq '.v2nodeDIV.nodeDT.ip' /opt/de_GWD/0conf | grep -v '^null$') ]] && jq 'del(.v2nodeDIV.nodeDT.ip)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
[[ -n $(jq '.listB' /opt/de_GWD/0conf | grep -v '^null$') ]] && jq 'del(.listB)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
[[ -n $(jq '.listW' /opt/de_GWD/0conf | grep -v '^null$') ]] && jq 'del(.listW)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
[[ -n $(jq '.listBlan' /opt/de_GWD/0conf | grep -v '^null$') ]] && jq 'del(.listBlan)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
[[ -n $(jq '.listWlan' /opt/de_GWD/0conf | grep -v '^null$') ]] && jq 'del(.listWlan)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
[[ -n $(jq '.dns.APPLEcn' /opt/de_GWD/0conf | grep -v '^null$') ]] && jq 'del(.dns.APPLEcn)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
[[ -n $(jq '.dns.STEAMcn' /opt/de_GWD/0conf | grep -v '^null$') ]] && jq 'del(.dns.STEAMcn)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
[[ -n $(jq '.v2nodeDIV.directApple' /opt/de_GWD/0conf | grep -v '^null$') ]] && jq 'del(.v2nodeDIV.directApple)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
[[ -n $(jq '.v2nodeDIV.directSteam' /opt/de_GWD/0conf | grep -v '^null$') ]] && jq 'del(.v2nodeDIV.directSteam)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf

dohORI=$(jq -r '.dns.DOH' /opt/de_GWD/0conf | grep -v '^null$')
dogORI=$(jq -r '.dns.DoG' /opt/de_GWD/0conf | grep -v '^null$')
[[ -n $dohORI ]] && jq --argjson doh "$dohORI" '.dns.doh=$doh' /opt/de_GWD/0conf | jq 'del(.dns.DOH)' | sponge /opt/de_GWD/0conf
[[ -n $dogORI ]] && jq --arg dog "$dogORI" '.dns.dog=$dog' /opt/de_GWD/0conf | jq 'del(.dns.DoG)' | sponge /opt/de_GWD/0conf

adlists=$(jq -r '.dns.adlistsURL' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
[[ -n $(jq '.[]' <<< "$adlists") ]] && jq --argjson adlists "$adlists" '.dns.adlists=$adlists' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf

adBlist=$(jq -r '.dns.adBlistURL' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
[[ -n $(jq '.[]' <<< "$adBlist") ]] && jq --argjson adBlist "$adBlist" '.dns.adBlist=$adBlist' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf

adBregex=$(jq -r '.dns.regexRule' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
[[ -n $(jq '.[]' <<< "$adBregex") ]] && jq --argjson adBregex "$adBregex" '.dns.adBregex=$adBregex' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf

adWlist=$(jq -r '.dns.adWlistURL' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
[[ -n $(jq '.[]' <<< "$adWlist") ]] && jq --argjson adWlist "$adWlist" '.dns.adWlist=$adWlist' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf

jq 'del(.dns.adlistsURL)' /opt/de_GWD/0conf |\
jq 'del(.dns.regexRule)' |\
jq 'del(.dns.adWlistURL)' |\
jq 'del(.dns.adBlistURL)' | sponge /opt/de_GWD/0conf

[[ -d "/opt/bitwardenrs" ]] && mv -f /opt/bitwardenrs /opt/bitwarden

if [[ -f "/etc/systemd/system/doh-client.service" ]] || [[ -f "/lib/systemd/system/doh-client.service" ]]; then
    systemctl disable --now doh-client >/dev/null 2>&1
    rm -rf /lib/systemd/system/doh-client.service
    rm -rf /etc/systemd/system/doh-client.service
    rm -rf /opt/de_GWD/doh-client*
    rm -rf "/etc/NetworkManager/dispatcher.d"
    systemctl daemon-reload >/dev/null
fi

if [[ -f "/etc/systemd/system/doh-server.service" ]] || [[ -f "/lib/systemd/system/doh-server.service" ]]; then
    systemctl disable --now doh-server >/dev/null 2>&1
    rm -rf /lib/systemd/system/doh-server.service
    rm -rf /etc/systemd/system/doh-server.service
    rm -rf /opt/de_GWD/doh-server*
    rm -rf "/etc/NetworkManager/dispatcher.d"
    systemctl daemon-reload >/dev/null
fi

if [[ -f "/etc/systemd/system/iptables-proxy.service" ]] || [[ -f "/lib/systemd/system/iptables-proxy.service" ]]; then
    systemctl disable iptables-proxy >/dev/null 2>&1
    rm -rf /etc/systemd/system/iptables-proxy.service >/dev/null 2>&1
    rm -rf /lib/systemd/system/iptables-proxy.service >/dev/null 2>&1
    systemctl daemon-reload >/dev/null
    /opt/de_GWD/iptables-proxy-down
    rm -rf /opt/de_GWD/iptables-proxy-down
    rm -rf /opt/de_GWD/iptables-proxy-up
fi

if [[ -f "/etc/systemd/system/pihole-FTL.service" ]] || [[ -f "/lib/systemd/system/pihole-FTL.service" ]]; then
    systemctl disable pihole-FTL >/dev/null 2>&1
    systemctl stop pihole-FTL >/dev/null 2>&1
    rm -rf /etc/systemd/system/pihole-FTL.service >/dev/null 2>&1
    rm -rf /lib/systemd/system/pihole-FTL.service >/dev/null 2>&1
    rm -rf /etc/.pihole /etc/pihole /opt/pihole /usr/bin/pihole-FTL /usr/local/bin/pihole /var/www/html/pihole /var/www/html/admin /var/log/pihole* /etc/dnsmasq.d/*
fi

if [[ -d "/opt/de_GWD/xDNSc" ]]; then
    systemctl disable xDNSc >/dev/null 2>&1
    systemctl stop xDNSc >/dev/null 2>&1
    rm -rf /etc/systemd/system/xDNSc.service
    rm -rf /lib/systemd/system/xDNSc.service
    systemctl daemon-reload >/dev/null
    rm -rf /opt/de_GWD/xDNSc
    jq 'del(.dns.xDNS)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
fi

if [[ -d "/opt/de_GWD/xDNSs" ]]; then
    systemctl disable xDNSs >/dev/null 2>&1
    systemctl stop xDNSs >/dev/null 2>&1
    rm -rf /etc/systemd/system/xDNSs.service
    rm -rf /lib/systemd/system/xDNSs.service
    systemctl daemon-reload >/dev/null
    rm -rf /opt/de_GWD/xDNSs
    jq 'del(.FORWARD.xDNSs)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
fi

if [[ `dpkg -l | grep php | grep fpm | awk '{print $2}'` = "php7.3-fpm" ]] || [[ `dpkg -l | grep php | grep fpm | awk '{print $2}'` = "php8.0-fpm" ]]; then
    rm -rf /etc/php/7.3/
    apt remove --purge '^php7.3.*'
    rm -rf /etc/php/8.0/
    apt remove --purge '^php8.0.*'
fi

[[ -f "/etc/nginx/off" ]] && rm -rf /etc/nginx/off
rm -rf /etc/dnsmasq.d/89-bogus-domains.china.conf
rm -rf /etc/dnsmasq.d/89-bogus-nxdomains.china.conf
[[ -n $(dpkg -l | awk '{print$2}' | grep '^smartdns$') ]] && rm -rf /etc/smartdns && apt remove --purge smartdns
[[ -n $(systemctl cat v2dns 2>/dev/null) ]] && systemctl disable --now v2dns >/dev/null 2>&1 && \
rm -rf /lib/systemd/system/v2dns.service && \
rm -rf /etc/systemd/system/v2dns.service && \
rm -rf /opt/de_GWD/v2dns
[[ -n $(dpkg -l | awk '{print$2}' | grep '^haveged$') ]] && apt remove --purge haveged
[[ -n $(dpkg -l | awk '{print$2}' | grep '^subversion$') ]] && apt remove --purge subversion
[[ -n $(dpkg -l | awk '{print$2}' | grep '^lighttpd$') ]] && apt remove --purge lighttpd
[[ -n $(dpkg -l | awk '{print$2}' | grep '^lighttpd-mod-deflate$') ]] && apt remove --purge lighttpd-mod-deflate

rm -rf /etc/pihole/migration_backup
rm -rf /etc/dnsmasq.d/89-bogus-nxdomain.china.conf
rm -rf /etc/apt/sources.list.d/unstable.list
rm -rf /etc/apt/preferences.d/limit-unstable
rm -rf /opt/de_GWD/.repo/vtrui.zip
rm -rf /opt/de_GWD/chnroute.txt
rm -rf /opt/de_GWD/Q4am
rm -rf /opt/de_GWD/Q4H
rm -rf /opt/de_GWD/Q2H
rm -rf /etc/dns-over-https
rm -rf /usr/bin/vtrui
rm -rf /usr/local/bin/yq
rm -rf /usr/sbin/yq
rm -rf /etc/vtrui
rm -rf /opt/de_GWD/ttyd
rm -rf /opt/de_GWD/IPxDNSSET
rm -rf /opt/de_GWD/chnrouteSET
rm -rf /opt/de_GWD/IPGlobalDNSSET
rm -rf /opt/de_GWD/IPlistBlanSET
rm -rf /opt/de_GWD/IPlistBSET
rm -rf /opt/de_GWD/IPlistWlanSET
rm -rf /opt/de_GWD/IPlistWSET
rm -rf /opt/de_GWD/IPv2nodeSET
rm -rf /opt/de_GWD/__MACOSX
rm -rf /opt/de_GWD/clearKernel
rm -rf /var/www/html/__MACOSX
rm -rf /var/log/smartdns.log
rm -rf /etc/dnsmasq.d/00-wg.conf
rm -rf /etc/dnsmasq.d/99-extra.conf
[[ -f "/etc/rc.local" ]] &&  rm -rf /etc/rc.local

if [[ -n $(systemctl list-unit-files --type=service | grep 'rc_online') ]]; then
systemctl stop rc_online
rm -rf /etc/systemd/system/rc_online.service
systemctl daemon-reload >/dev/null
fi

echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}Clean-up${cRES}"
}



preUpdate(){
echo -e "${BLUE}################################################################# ${cRES}"
echo -e "${GREEN}DNS information${cRES}"
echo

ethernetnum=$(find /sys/class/net ! -type d | xargs --max-args=1 realpath | grep 'device' | xargs -n 1 | grep -v 'virtual' | grep -v 'ifb' | awk -F'/' '{print$NF}' | head -n1)
gatewayAddr=$(jq -r '.address.upstreamIP' /opt/de_GWD/0conf | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')
localAddrCIDR=$(jq -r '.address.localIP' /opt/de_GWD/0conf | grep -v '^null$')
localAddr=$(echo $localAddrCIDR | cut -d / -f1)
netmask=$(echo $localAddrCIDR | sed -r 's/([0-9]{1,3}\.){3}[0-9]{1,3}//g')

if [[ -n $netmask ]]; then
localCIDR="$(echo $localAddr | cut -d . -f1-3).0$netmask"
else
netmask="/24" 
localAddrCIDR="$localAddr$netmask"
localCIDR="$(echo $localAddr | cut -d . -f1-3).0$netmask"
fi

DoG=$(jq -r '.dns.dog' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
doh1=$(jq -r '.dns.doh[]' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$' | awk NR==1)
doh2=$(jq -r '.dns.doh[]' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$' | awk NR==2)

[[ -n $doh1 ]] && echo -e "\t${WHITE}DNS over Https 1: \c" && echo -e "${YELLOW}$doh1${cRES}"
[[ -n $doh2 ]] && echo -e "\t${WHITE}DNS over Https 2: \c" && echo -e "${YELLOW}$doh2${cRES}"
[[ -n $DoG ]] && echo -e "\t${WHITE}DNS over gRPC   : \c" && echo -e "${YELLOW}$DoG${cRES}"


domain=$(jq -r '.update.v2node.domain' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
tls=$(jq -r '.update.v2node.tls' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
port=$(jq -r '.update.v2node.port' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
uuid=$(jq -r '.update.v2node.uuid' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
path=$(jq -r '.update.v2node.path' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')

if [[ -z $domain ]] || [[ -z $uuid ]]; then
  cp -f /opt/de_GWD/0conf_bak /opt/de_GWD/0conf
  clear
  preUpdate
fi

[[ -z $tls ]] && tls=$domain

piholePW=$(jq -r '.address.PWD' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')

serverName=$(jq -r '.address.serverName' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
webUIport=$(jq -r '.address.webUIport' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
updatePort=$(jq -r '.update.updatePort' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')

echo
echo -e "${GREEN}Node Information${cRES}"
echo
echo -e "\t${WHITE}Domain          : \c" && echo -e "${YELLOW}$domain${cRES}"
echo -e "\t${WHITE}Port            : \c" && echo -e "${YELLOW}$port${cRES}"
echo -e "\t${WHITE}UUID            : \c" && echo -e "${YELLOW}$uuid${cRES}"
echo -e "\t${WHITE}Path            : \c" && echo -e "${YELLOW}$path${cRES}"
echo -e "${BLUE}################################################################# ${cRES}"
echo
}



de_GWDconnect(){
if [[ $1 = "u" ]]; then
echo -e "${WHITE}de_GWD server connect  ${cRES}\c" && echo -e "\t${WHITE}[...]${cRES}\r\c"
else
echo -e "\t${WHITE}de_GWD server connect${cRES}\r\c"
fi

try_connect() {
    local url=$1
    local attempts=3
    local timeout=3
    local attempt=1
    local response

    while [ $attempt -le $attempts ]; do
        echo "Attempt $attempt to connect to $url"
        response=$(curl -Is -m $timeout "$url")
        if [ $? -eq 0 ]; then
            echo "Successfully connected to $url"
            echo "$response"
            return 0
        else
            echo "Failed to connect to $url"
            ((attempt++))
            [ $attempt -le $attempts ] && sleep 1
        fi
    done
    echo "Failed to connect to $url after $attempts attempts"
    return 1
}

# Execute connections
serverConnect1=$(try_connect "google.com")
serverConnect2=$(try_connect "1.1.1.1")

if [[ $1 = "u" ]]; then
    if [[ $2 = "a" ]]; then
        preDL
        updateGWD_Green
        [[ -z $serverConnect1 ]] || [[ -z $serverConnect2 ]] && exit
    else
        if [[ -n $serverConnect1 ]] && [[ -n $serverConnect2 ]] && [[ $(systemctl is-active 'vtrui') = "active" ]]; then
        echo -e "${WHITE}de_GWD server connect  ${cRES}\c" && echo -e "\t${WHITE}[${GREEN} ✓ ${WHITE}]${cRES}"
        de_GWDconnect_check="OK"
            echo -e "${GREEN}================================= ${cRES}"
            echo -e "${GREEN}[Y]: Full Update${cRES}"
            echo -e "${GREEN}[*]: Any other key to Fast Update${cRES}"
            echo -e "${GREEN}================================= ${cRES}"
            read -s -n 1 updateDebian
            echo -e "${WHITE}[...]\c" && echo -e "\t${WHITE}Start Updating de_GWD${cRES}\r\c"

            if [[ $updateDebian = "Y" ]] || [[ $updateDebian = "y" ]]; then
            preDL
            updateAPT
            fi
            preDL
            updateGWD_Green
        else
        echo -e "${WHITE}de_GWD server connect  ${cRES}\c" && echo -e "\t${WHITE}[${RED} ✕ ${WHITE}]${cRES}"
        updateGWD_Red
        fi
    fi
else
    if [[ -n $serverConnect1 ]] && [[ -n $serverConnect2 ]] && [[ $(systemctl is-active 'vtrui') = "active" ]]; then
        echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}de_GWD server connect${cRES}"
    else
        echo -e "${WHITE}[ ${RED}✕ ${WHITE}]\c" && echo -e "\t${WHITE}de_GWD server connect${cRES}"
    fi


if [[ -z $serverConnect1 ]] || [[ -z $serverConnect2 ]]; then
serverStatus
echo -e "\t${RED}Failed! Stop mosdns smartdns nftables.${cRES}"
cat << EOF >/etc/resolv.conf
nameserver 119.29.29.29
nameserver 180.76.76.76
nameserver 114.114.114.114
nameserver 223.5.5.5
EOF
systemctl stop mosdns >/dev/null 2>&1
systemctl stop smartdns >/dev/null 2>&1
systemctl stop nftables >/dev/null 2>&1
exit
fi
fi
}



preInstall(){
sync; echo 3 >/proc/sys/vm/drop_caches >/dev/null 2>&1

if [[ $(systemctl is-active swap.target) != "active" ]]; then
systemctl unmask swap.target >/dev/null 2>&1
systemctl start swap.target >/dev/null 2>&1
fi

if [[ $(free -m | awk 'NR==3{print$2}') = "0" ]] && [[ $virt_type != "container" ]]; then
if [[ $(df -T / | awk '{print$2}' | tail -n 1) = "btrfs" ]]; then
btrfs subvolume create /swap 2>/dev/null
btrfs filesystem mkswapfile --size 1g --uuid clear /swap/swapfile 2>/dev/null
swapon /swap/swapfile
sed -i "/swapfile/d" /etc/fstab
echo "/swap/swapfile none swap defaults 0 0" >>/etc/fstab
else
fallocate -l 1G /swapfile 2>/dev/null
dd if=/dev/zero of=/swapfile bs=1M count=1024 status=progress 2>/dev/null
chmod 600 /swapfile
mkswap -U clear /swapfile
swapon /swapfile
sed -i "/swapfile/d" /etc/fstab
echo "/swapfile none swap defaults 0 0" >>/etc/fstab
fi
echo "RESUME=" >/etc/initramfs-tools/conf.d/resume
fi

cat << EOF >/etc/apt/apt.conf.d/01InstallLess
APT::Get::Assume-Yes "true";
APT::Install-Recommends "false";
APT::Install-Suggests "false";
EOF

cat << EOF >/etc/apt/apt.conf.d/71debconf
Dpkg::Options {
   "--force-confdef";
   "--force-confold";
};
EOF

sed -i '/ulimit -SHn/d' /etc/profile
sed -i '/ulimit -c/d' /etc/profile
sed -i '/ulimit -d/d' /etc/profile
sed -i '/ulimit -f/d' /etc/profile
sed -i '/ulimit -m/d' /etc/profile
sed -i '/ulimit -s/d' /etc/profile
sed -i '/ulimit -t/d' /etc/profile
sed -i '/ulimit -u/d' /etc/profile
sed -i '/ulimit -v/d' /etc/profile
sed -i '/HISTCONTROL=/d' /etc/profile
sed -i '/alias reboot=/d' /etc/profile
cat << EOF >>/etc/profile
ulimit -SHn 1000000
ulimit -t 65536
ulimit -u 65536
ulimit -c 65536
ulimit -d unlimited
ulimit -f unlimited
ulimit -s unlimited
ulimit -v unlimited

HISTCONTROL=ignoredups
alias reboot="sudo systemctl reboot"
EOF
source /etc/profile

sed -i '/pam_limits.so/d' /etc/pam.d/common-session
echo "session required	pam_limits.so" >>/etc/pam.d/common-session
cat << EOF >/etc/security/limits.conf
root     soft   nofile    1000000
root     hard   nofile    1000000
root     soft   nproc     1000000
root     hard   nproc     1000000
root     soft   core      1000000
root     hard   core      1000000
root     hard   memlock   unlimited
root     soft   memlock   unlimited

www-data     soft   nofile    1000000
www-data     hard   nofile    1000000
www-data     soft   nproc     1000000
www-data     hard   nproc     1000000
www-data     soft   core      1000000
www-data     hard   core      1000000
www-data     hard   memlock   unlimited
www-data     soft   memlock   unlimited

*     soft   nofile    1000000
*     hard   nofile    1000000
*     soft   nproc     1000000
*     hard   nproc     1000000
*     soft   core      1000000
*     hard   core      1000000
*     hard   memlock   unlimited
*     soft   memlock   unlimited
EOF

sed -i '/DefaultLimitCORE/d' /etc/systemd/system.conf
sed -i '/DefaultLimitNOFILE/d' /etc/systemd/system.conf
sed -i '/DefaultLimitNPROC/d' /etc/systemd/system.conf
cat << EOF >>/etc/systemd/system.conf
DefaultLimitCORE=1000000
DefaultLimitNOFILE=1000000
DefaultLimitNPROC=1000000
EOF
systemctl daemon-reload

rm -f /var/cache/apt/archives/lock
rm -f /var/lib/apt/lists/lock
rm -f /var/lib/dpkg/lock
rm -f /var/lib/dpkg/lock-frontend
dpkg --configure -a

pkgDEP1

cat << EOF >/etc/default/rng-tools-debian
# -*- mode: sh -*-
#-
# Configuration for the rng-tools-debian initscript

# Set to the input source for random data, leave undefined
# for the initscript to attempt auto-detection.  Set to /dev/null
# for the viapadlock driver.
#HRNGDEVICE=/dev/hwrng
#HRNGDEVICE=/dev/null
HRNGDEVICE=/dev/urandom

# Additional options to send to rngd. See the rngd(8) manpage for
# more information.  Do not specify -r/--rng-device here, use
# HRNGDEVICE for that instead.
#RNGDOPTIONS="--hrng=intelfwh --fill-watermark=90% --feed-interval=1"
#RNGDOPTIONS="--hrng=viakernel --fill-watermark=90% --feed-interval=1"
#RNGDOPTIONS="--hrng=viapadlock --fill-watermark=90% --feed-interval=1"
# For TPM (also add tpm-rng to /etc/initramfs-tools/modules or /etc/modules):
#RNGDOPTIONS="--fill-watermark=90% --feed-interval=1"

# If you need to configure which RNG to use, do it here:
#HRNGSELECT="virtio_rng.0"
# Use this instead of sysfsutils, which starts too late.
EOF
systemctl restart rng-tools

cat << EOF >/etc/chrony/chrony.conf
server time.cloud.tencent.com iburst
server time4.cloud.tencent.com iburst
server time5.cloud.tencent.com iburst
server ntp.aliyun.com iburst
server ntp6.aliyun.com iburst
server ntp7.aliyun.com iburst

driftfile /var/lib/chrony/chrony.drift
logdir /var/log/chrony
maxupdateskew 100.0
rtcsync
makestep 1 3
leapsectz right/UTC
EOF
systemctl restart chrony
systemctl enable chrony >/dev/null 2>&1

rm -rf /etc/systemd/resolved.conf >/dev/null 2>&1
systemctl daemon-reload >/dev/null
systemctl mask --now systemd-resolved >/dev/null 2>&1

[[ -n $(which setenforce) ]] && setenforce 0
[[ -f "/etc/selinux/config" ]] && sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config

ip rule del table 220 >/dev/null 2>&1
ip route flush table 220 >/dev/null 2>&1
ip route flush cache >/dev/null 2>&1
ip route del local default dev lo table 220 >/dev/null 2>&1

[[ -n $(systemctl cat nftables 2>/dev/null) ]] && systemctl stop nftables >/dev/null 2>&1
[[ -n $(systemctl cat vtrui 2>/dev/null) ]] && systemctl stop vtrui >/dev/null 2>&1

cat << EOF >/etc/resolv.conf
nameserver 119.29.29.29
nameserver 180.76.76.76
nameserver 114.114.114.114
nameserver 223.5.5.5
EOF
}



preConf(){
echo -e "${WHITE}[...]\c" && echo -e "\t${WHITE}System Config${cRES}\r\c"
localeSet=`cat << EOF
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8
EOF
`
if [[ -z $(localectl list-locales | grep "en_US.UTF-8") ]]; then
echo "$localeSet" >/etc/default/locale
echo "en_US.UTF-8 UTF-8" >/etc/locale.gen
locale-gen "en_US.UTF-8"
localectl set-locale en_US.UTF-8
update-locale LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8 LC_ALL=en_US.UTF-8
fi

[[ $(date +"%Z %z") != "CST +0800" ]] && timedatectl set-timezone "Asia/Shanghai"
timedatectl set-local-rtc 0 >/dev/null 2>&1
timedatectl set-ntp true

[[ -f "/etc/ld.so.preload" ]] && sed -i "/libjemalloc/d" /etc/ld.so.preload
ldconfig

sed -i '/nf_conntrack/d' /etc/modules-load.d/modules.conf
sed -i '/ifb/d' /etc/modules-load.d/modules.conf
cat << EOF >>/etc/modules-load.d/modules.conf
nf_conntrack
ifb
sch_cake
EOF
modprobe nf_conntrack
modprobe ifb
modprobe sch_cake

cat << EOF >/etc/sysctl.conf
kernel.sysrq = 438
vm.overcommit_memory = 1
vm.swappiness = 5
vm.dirty_ratio = 10
vm.dirty_background_ratio = 5
fs.file-max = 1000000
fs.inotify.max_user_instances = 16384
fs.inotify.max_queued_events = 32768
fs.inotify.max_user_watches = 65536
net.unix.max_dgram_qlen = 2048
net.netfilter.nf_conntrack_acct = 0
net.netfilter.nf_conntrack_checksum = 0
net.netfilter.nf_conntrack_events = 1
net.netfilter.nf_conntrack_timestamp = 0
net.netfilter.nf_conntrack_max = 1048576
net.netfilter.nf_conntrack_buckets = 65536
net.netfilter.nf_conntrack_tcp_loose = 1
net.netfilter.nf_conntrack_tcp_be_liberal = 1
net.netfilter.nf_conntrack_tcp_max_retrans = 3
net.netfilter.nf_conntrack_generic_timeout = 60
net.netfilter.nf_conntrack_tcp_timeout_unacknowledged = 30
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 30
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 30
net.netfilter.nf_conntrack_tcp_timeout_close_wait = 15
net.netfilter.nf_conntrack_tcp_timeout_close = 5
net.netfilter.nf_conntrack_tcp_timeout_last_ack = 30
net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 30
net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 30
net.netfilter.nf_conntrack_tcp_timeout_established = 3600
net.netfilter.nf_conntrack_sctp_timeout_established = 3600
net.netfilter.nf_conntrack_udp_timeout = 15
net.netfilter.nf_conntrack_udp_timeout_stream = 45
net.core.somaxconn = 65536
net.core.netdev_max_backlog = 262144
net.core.optmem_max = 524288
net.core.rmem_default = 524288
net.core.wmem_default = 524288
net.core.rmem_max = 8388608
net.core.wmem_max = 8388608
net.mptcp.enabled = 1
net.ipv4.route.gc_timeout = 60
net.ipv4.conf.all.arp_accept = 0
net.ipv4.conf.default.arp_accept = 0
net.ipv4.conf.all.arp_announce = 2
net.ipv4.conf.default.arp_announce = 2
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.default.arp_ignore = 1
net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.default.rp_filter = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.route_localnet = 1
net.ipv4.route.flush = 1
net.ipv4.ip_local_port_range = 1024 65535
net.ipv4.ip_local_reserved_ports = 53,5331,5331,5341,3000
net.ipv4.ip_forward = 1
net.ipv4.conf.all.forwarding = 1
net.ipv4.conf.default.forwarding = 1
net.ipv4.ip_no_pmtu_disc = 0
net.ipv4.udp_mem = 4096 32768 524288
net.ipv4.udp_rmem_min = 131072
net.ipv4.udp_wmem_min = 131072
net.ipv4.tcp_mem = 16384 131072 1048576
net.ipv4.tcp_rmem = 4096 524288 8388608
net.ipv4.tcp_wmem = 4096 524288 8388608
net.ipv4.tcp_max_tw_buckets = 131072
net.ipv4.tcp_max_orphans = 131072
net.ipv4.tcp_max_syn_backlog = 32768
net.ipv4.tcp_notsent_lowat = 131072
net.ipv4.tcp_limit_output_bytes = 1048576
net.ipv4.tcp_adv_win_scale = 1
net.ipv4.tcp_moderate_rcvbuf = 1
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_workaround_signed_windows = 0
net.ipv4.tcp_mtu_probing = 0
net.ipv4.tcp_mtu_probe_floor = 512
net.ipv4.tcp_base_mss = 1460
net.ipv4.tcp_no_metrics_save = 0
net.ipv4.tcp_no_ssthresh_metrics_save = 0
net.ipv4.tcp_sack = 1
net.ipv4.tcp_dsack = 1
net.ipv4.tcp_frto = 0
net.ipv4.tcp_recovery = 1
net.ipv4.tcp_early_retrans = 3
net.ipv4.tcp_min_rtt_wlen = 120
net.ipv4.tcp_reordering = 3
net.ipv4.tcp_ecn = 0
net.ipv4.tcp_fin_timeout = 10
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_fastopen_blackhole_timeout_sec = 0
net.ipv4.tcp_fastopen_key = 00000000-00000000-00000000-00000000
net.ipv4.tcp_keepalive_time = 3600
net.ipv4.tcp_keepalive_intvl = 60
net.ipv4.tcp_keepalive_probes = 9
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_syncookies = 0
net.ipv4.tcp_tw_reuse = 2
net.ipv4.tcp_syn_retries = 3
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_retries1 = 3
net.ipv4.tcp_retries2 = 8
net.ipv4.tcp_orphan_retries = 0
net.ipv4.tcp_challenge_ack_limit = 100000
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.tcp_retrans_collapse = 0
net.ipv4.tcp_autocorking = 0
net.ipv4.tcp_rfc1337 = 1
net.ipv4.tcp_congestion_control = bbr
net.core.default_qdisc = cake
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
EOF

sync
sysctl -p >/dev/null 2>&1

if [[ -n $(dpkg -l | awk '{print$2}' | grep '^docker-ce$') ]] && [[ -n $(dpkg -l | awk '{print$2}' | grep '^containerd.io$') ]]; then
mkdir -p /etc/docker/
systemctl stop docker docker.socket containerd
cat << EOF >/etc/docker/daemon.json
{
  "iptables": false
}
EOF
systemctl restart docker
fi

cat << EOF >/etc/rc_online.local
#!/bin/bash
echo madvise >/sys/kernel/mm/transparent_hugepage/enabled

$(which ip) route show table local | grep -v 'linkdown' | grep -v 'broadcast' | while read line; do
line=\$(echo \$line | awk -F' mtu ' '{print\$1}')
$(which ip) route change \$line mtu 1500 initcwnd 1000 initrwnd 1000 fastopen_no_cookie 1 congctl lock cubic
done

$(which ip) route show table local | grep ' dev lo ' | while read line; do
line=\$(echo \$line | awk -F' mtu ' '{print\$1}')
$(which ip) route change \$line mtu 65520 initcwnd 1000 initrwnd 1000 fastopen_no_cookie 1 congctl lock cubic
done

NIC_local=\$($(which ip) route | grep -v 'linkdown' | grep -v 'broadcast' | grep -v 'scope' | awk -F' dev ' '{print\$2}' | cut -d' ' -f1)
$(which ip) route | grep " dev \$NIC_local " | while read line; do
line=\$(echo \$line | awk -F' mtu ' '{print\$1}')
$(which ip) route change \$line mtu 1500 fastopen_no_cookie 1 congctl lock $(sysctl net.ipv4.tcp_congestion_control | awk -F' = ' '{print$2}')
done



NIC_device=\$(find /sys/class/net ! -type d | xargs --max-args=1 realpath | grep 'device')
for ifb in \$(echo \$NIC_device | xargs -n 1 | grep 'virtual' | awk -F'/' '{print\$NF}' | grep '^ifb'); do
$(which ip) link set \$ifb down
$(which ip) link delete \$ifb
done

$(which ip) link set lo qlen 10000 mtu 65520
$(which tc) qdisc del dev lo root >/dev/null 2>&1
$(which tc) qdisc add dev lo root cake unlimited rtt 10us diffserv4 dual-srchost no-split-gso ack-filter-aggressive raw egress

$(which ip) link add name ifb4lo type ifb >/dev/null 2>&1
$(which tc) qdisc del dev lo ingress >/dev/null 2>&1
$(which tc) qdisc add dev lo handle ffff: ingress
$(which tc) qdisc del dev ifb4lo root >/dev/null 2>&1
$(which tc) qdisc add dev ifb4lo root cake unlimited rtt 10us diffserv4 dual-dsthost no-split-gso nack-filter-aggressive raw ingress
$(which ip) link set ifb4lo qlen 10000 mtu 65520
$(which ip) link set ifb4lo up
$(which tc) filter add dev lo parent ffff: matchall action mirred egress redirect dev ifb4lo

echo \$NIC_device | xargs -n 1 | grep 'virtual' | awk -F'/' '{print\$NF}' | grep -v 'docker' | grep -v 'ifb' | grep -v '^lo\$' | while read line; do
MTU_NUM=\$(< /sys/class/net/\$line/mtu)
ifb4eth=\$(echo "ifb4\$line" | cut -c 1-15)
$(which ip) link set \$line qlen 10001 mtu \$MTU_NUM
$(which tc) qdisc del dev \$line root >/dev/null 2>&1
$(which tc) qdisc add dev \$line root cake unlimited rtt 10us diffserv4 dual-srchost nonat nowash no-split-gso no-ack-filter raw overhead 18 mpu 64 noatm egress

$(which ip) link add name \$ifb4eth type ifb >/dev/null 2>&1
$(which tc) qdisc del dev \$line ingress >/dev/null 2>&1
$(which tc) qdisc add dev \$line handle ffff: ingress
$(which tc) qdisc del dev \$ifb4eth root >/dev/null 2>&1
$(which tc) qdisc add dev \$ifb4eth root cake unlimited rtt 10us diffserv4 dual-dsthost nonat nowash no-split-gso ack-filter raw overhead 18 mpu 64 noatm ingress
$(which ip) link set \$ifb4eth qlen 10001 mtu \$MTU_NUM
$(which ip) link set \$ifb4eth up
$(which tc) filter add dev \$line parent ffff: matchall action mirred egress redirect dev \$ifb4eth
done

echo \$NIC_device | xargs -n 1 | grep -v 'virtual' | awk -F'/' '{print\$NF}' | while read line; do
MTU_NUM=\$(< /sys/class/net/\$line/mtu)
ifb4eth=\$(echo "ifb4\$line" | cut -c 1-15)
$(which ip) link set \$line qlen 10001 mtu \$MTU_NUM
$(which tc) qdisc del dev \$line root >/dev/null 2>&1
$(which tc) qdisc add dev \$line root cake unlimited diffserv4 dual-srchost nonat nowash no-split-gso ack-filter ethernet egress

$(which ip) link add name \$ifb4eth type ifb >/dev/null 2>&1
$(which tc) qdisc del dev \$line ingress >/dev/null 2>&1
$(which tc) qdisc add dev \$line handle ffff: ingress
$(which tc) qdisc del dev \$ifb4eth root >/dev/null 2>&1
$(which tc) qdisc add dev \$ifb4eth root cake unlimited diffserv4 dual-dsthost nonat nowash no-split-gso ack-filter ethernet ingress
$(which ip) link set \$ifb4eth qlen 10001 mtu \$MTU_NUM
$(which ip) link set \$ifb4eth up
$(which tc) filter add dev \$line parent ffff: matchall action mirred egress redirect dev \$ifb4eth

$(which ethtool) -s \$line duplex full >/dev/null 2>&1
$(which ethtool) -K \$line rx on tx on sg off tso off gso off gro off tx-gso-partial off >/dev/null 2>&1
done

$(which ip) tcp_metrics flush
$(which ip) route flush cache
EOF
chmod +x /etc/rc_online.local

mkdir -p /etc/systemd/system/networking.service.d/
cat << EOF >/etc/systemd/system/networking.service.d/override.conf
[Service]
ExecStartPost=/etc/rc_online.local
EOF
systemctl daemon-reload >/dev/null
/etc/rc_online.local

echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}System Config${cRES}"
}



installSmartDNS(){
echo -e "${WHITE}[...]\c" && echo -e "\t${WHITE}Proxy Components Prepared${cRES}\r\c"
docker stop pihole >/dev/null 2>&1

if [[ -n $(unzip -tq /opt/de_GWD/.repo/de_GWD.zip | grep "No errors detected in compressed data") ]]; then
rm -rf /opt/de_GWD/smartdns
rm -rf /opt/de_GWD/coredns
rm -rf /opt/de_GWD/mosdns
rm -rf /opt/de_GWD/vtrui
mkdir -p /opt/de_GWD/smartdns
mkdir -p /opt/de_GWD/coredns
mkdir -p /opt/de_GWD/mosdns
mkdir -p /opt/de_GWD/vtrui

rm -rf /tmp/de_GWD
unzip /opt/de_GWD/.repo/de_GWD.zip -d /tmp/de_GWD >/dev/null
cp -f /tmp/de_GWD/yq /usr/bin/yq
cp -f /tmp/de_GWD/smartdns /opt/de_GWD/smartdns/smartdns
cp -f /tmp/de_GWD/coredns /opt/de_GWD/coredns/coredns
cp -f /tmp/de_GWD/mosdns /opt/de_GWD/mosdns/mosdns
cp -f /tmp/de_GWD/xray /opt/de_GWD/vtrui/vtrui
chmod +x /usr/bin/yq
chmod +x /opt/de_GWD/smartdns/smartdns
chmod +x /opt/de_GWD/coredns/coredns
chmod +x /opt/de_GWD/mosdns/mosdns
chmod +x /opt/de_GWD/vtrui/vtrui
rm -rf /tmp/de_GWD*
else
rm -rf /opt/de_GWD/.repo/de_GWD.zip
echo -e "${WHITE}de_GWD Zip${RED} Download Failed${cRES}" && exit
fi
echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}Proxy Components Prepared${cRES}"



rm -rf /lib/systemd/system/coredns.service
cat << EOF >/etc/systemd/system/coredns.service
[Unit]
Description=CoreDNS DNS server
After=network.target

[Service]
User=root
Type=simple
ExecStart=/opt/de_GWD/coredns/coredns -conf /opt/de_GWD/coredns/corefile
ExecReload=$(which kill) -SIGUSR1 \$MAINPID
KillMode=process
Restart=always
RestartSec=2
TimeoutStopSec=5

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload >/dev/null


rm -rf /lib/systemd/system/mosdns.service
cat << EOF >/etc/systemd/system/mosdns.service
[Unit]
Description=mosdns
ConditionFileIsExecutable=/opt/de_GWD/mosdns/mosdns

[Service]
User=root
Type=simple
ExecStart=/opt/de_GWD/mosdns/mosdns start --as-service -d /opt/de_GWD/mosdns
ExecStop=$(which kill) -s STOP \$MAINPID
KillMode=process
Restart=always
RestartSec=2
TimeoutStopSec=5

Nice=-11

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload >/dev/null



mkdir -p /var/log/smartdns
>/var/log/smartdns/smartdns.log
cat << EOF >/opt/de_GWD/smartdns/smartdns.conf
bind :53 -group DNS_global

bind 127.0.0.1:5331 -no-speed-check -no-cache -group DNS_chn
bind-tcp 127.0.0.1:5331 -no-speed-check -no-cache -group DNS_chn

bind 127.0.0.1:5332 -no-speed-check -no-cache -group DNS_global
bind-tcp 127.0.0.1:5332 -no-speed-check -no-cache -group DNS_global

server 114.114.114.114 -group DNS_chn -exclude-default-group
server 114.114.115.115 -group DNS_chn -exclude-default-group
server 119.29.29.29 -group DNS_chn -exclude-default-group
server 119.28.28.28 -group DNS_chn -exclude-default-group
server 180.76.76.76 -group DNS_chn -exclude-default-group
server 223.5.5.5 -group DNS_chn -exclude-default-group
server 223.6.6.6 -group DNS_chn -exclude-default-group
EOF

kill -9 $(ps -e | grep 'smartdns' | awk '{print$1}') >/dev/null 2>&1
rm -rf /lib/systemd/system/smartdns.service
cat << EOF >/etc/systemd/system/smartdns.service
[Unit]
Description=SmartDNS
After=network.target

[Service]
User=root
Type=forking
PIDFile=/run/smartdns.pid
ExecStart=/opt/de_GWD/smartdns/smartdns -p /run/smartdns.pid -c /opt/de_GWD/smartdns/smartdns.conf
Restart=always
RestartSec=2
TimeoutStopSec=5

Nice=-12

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload >/dev/null
systemctl restart smartdns
if [[ $? -ne 0 ]]; then
sed -i '/Nice=/d' /etc/systemd/system/smartdns.service
systemctl daemon-reload >/dev/null
systemctl restart smartdns
fi
systemctl enable smartdns >/dev/null 2>&1

rm -rf /etc/resolvconf/resolv.conf.d/*
>/etc/resolvconf/resolv.conf.d/original
>/etc/resolvconf/resolv.conf.d/base
>/etc/resolvconf/resolv.conf.d/tail
rm -rf /etc/resolv.conf
rm -rf /run/resolvconf/interface
cat << EOF >/etc/resolvconf/resolv.conf.d/head
nameserver 127.0.0.1
EOF
if [[ -f "/etc/resolvconf/run/resolv.conf" ]]; then
ln -sf /etc/resolvconf/run/resolv.conf /etc/resolv.conf
elif [[ -f "/run/resolvconf/resolv.conf" ]]; then
ln -sf /run/resolvconf/resolv.conf /etc/resolv.conf
fi
sed -i '/dns-nameservers /d' /etc/network/interfaces
resolvconf -u
echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}Deploy SmartDNS${cRES}"



echo
echo -e "${BLUE}################################################################# ${cRES}"
echo

if [[ -n $doh1 ]]; then
echo -e "${WHITE}DNS over Https 1:\t${cRES}"
echo -e "${WHITE}Domain: \c" && echo -e "\t${WHITE}IP: ${cRES}\r\c"
doh1Domain=$(echo $doh1 | cut -d/ -f1 | cut -d: -f1)
doh1IP=$(dig @127.0.0.1 $doh1Domain -4p 5331 +short | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | xargs -n 1 | awk NR==1)

if [[ -n $doh1IP ]]; then
doh1Port=$(echo $doh1 | cut -d/ -f1 | cut -d: -f2 | grep '^[[:digit:]]*$')
doh1Path=$(echo $doh1 | cut -d/ -f2)

if [[ -z $doh1Port ]]; then
    doh1Str="$doh1IP/$doh1Path"
else
    doh1Str="$doh1IP:$doh1Port/$doh1Path"
fi

cat << EOF >>/opt/de_GWD/smartdns/smartdns.conf
server-https https://$doh1Str -host-name $doh1Domain -no-check-certificate -group DNS_global
EOF
fi

echo -e "${WHITE}Domain: ${YELLOW}$doh1Domain\c" && echo -e "\t${WHITE}IP: ${YELLOW}$doh1IP${cRES}"
echo
fi

if [[ -n $doh2 ]]; then
echo -e "${WHITE}DNS over Https 2: ${cRES}"
echo -e "${WHITE}Domain: \c" && echo -e "\t${WHITE}IP: ${cRES}\r\c"
doh2Domain=$(echo $doh2 | cut -d/ -f1 | cut -d: -f1)
doh2IP=$(dig @127.0.0.1 $doh2Domain -4p 5331 +short | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | xargs -n 1 | awk NR==1)

if [[ -n $doh2IP ]]; then
doh2Port=$(echo $doh2 | cut -d/ -f1 | cut -d: -f2 | grep '^[[:digit:]]*$')
doh2Path=$(echo $doh2 | cut -d/ -f2)

if [[ -z $doh2Port ]]; then
    doh2Str="$doh2IP/$doh2Path"
else
    doh2Str="$doh2IP:$doh2Port/$doh2Path"
fi

cat << EOF >>/opt/de_GWD/smartdns/smartdns.conf
server-https https://$doh2Str -host-name $doh2Domain -no-check-certificate -group DNS_global
EOF
fi

systemctl restart smartdns
sleep 2
echo -e "${WHITE}Domain: ${YELLOW}$doh2Domain\c" && echo -e "\t${WHITE}IP: ${YELLOW}$doh2IP${cRES}"
echo
fi

if [[ -n $DoG ]]; then
echo -e "${WHITE}DNS over gRPC: ${cRES}"
echo -e "${WHITE}Domain: \c" && echo -e "\t${WHITE}IP: ${cRES}\r\c"
DoGcDomain=$(echo $DoG | cut -d: -f1)
DoGcIP=$(dig @127.0.0.1 $DoGcDomain -4p 5331 +short | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | xargs -n 1 | awk NR==1)
DoGcPort=$(echo $DoG | cut -d: -f2 | grep '^[[:digit:]]*$')
echo -e "${WHITE}Domain: ${YELLOW}$DoGcDomain\c" && echo -e "\t${WHITE}IP: ${YELLOW}$DoGcIP${cRES}"
echo

cat << EOF >>/opt/de_GWD/smartdns/smartdns.conf
server 127.0.0.1:5333 -group DNS_global
EOF
fi
systemctl restart smartdns

if [[ -n $DoGcIP ]]; then
cat << EOF >/opt/de_GWD/coredns/corefile
# DoGc_START
.:5333 {
bind 127.0.0.1
grpc . $DoGcIP:$DoGcPort {
  tls_servername $DoGcDomain
}
template ANY AAAA {
  rcode NXDOMAIN
}
reload 6s 3s
}
# DoGc_END
EOF
systemctl enable coredns >/dev/null 2>&1
systemctl restart coredns
fi

echo -e "${WHITE}V2 node: ${cRES}"
echo -e "${WHITE}Domain: \c" && echo -e "\t${WHITE}IP: ${cRES}\r\c"
systemctl stop mosdns
sleep 5
domainIP=$(dig @127.0.0.1 $domain -4p 5332 +short | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | xargs -n 1 | awk NR==1)
echo -e "${WHITE}Domain: ${YELLOW}$domain\c" && echo -e "\t${WHITE}IP: ${YELLOW}$domainIP${cRES}"
echo
echo -e "${BLUE}################################################################# ${cRES}"
echo
[[ -z $domainIP ]] && echo -e "${WHITE}V2 node${RED} Failure to resolve${cRES}" && exit 
}



installXray(){
echo -e "${WHITE}[...]\c" && echo -e "\t${WHITE}Deploy vtrui${cRES}\r\c"

cat << EOF >/opt/de_GWD/vtrui/config.json
{
  "log": {
    "access":"none",
    "error":"none",
    "loglevel":"none"
  },
  "dns":{
    "queryStrategy":"UseIP",
    "disableCache":true,
    "hosts":{"$domain":"$domainIP"},
    "servers":["tcp+local://127.0.0.1:5332"]
  },
  "inbounds":[
    {
      "port":9896,
      "listen":"127.0.0.1",
      "protocol":"dokodemo-door",
      "settings":{"network":"tcp,udp","followRedirect":true},
      "streamSettings":{"sockopt":{"tproxy":"tproxy","mark":255,"tcpFastOpen":true,"tcpMptcp":true}}
    }
  ],
  "outbounds":[
    {
      "tag":"default"
    },
    {
      "tag":"direct",
      "protocol":"freedom",
      "streamSettings":{"sockopt":{"mark":255,"tcpFastOpen":true,"tcpNoDelay":true}}
    }
  ]
}
EOF

if [[ -z $path ]]; then
OBdefault=`cat << EOF
    {
      "tag": "default",
      "protocol": "vmess",
      "settings": {
        "vnext": [
          {
            "address": "$domain",
            "port": $port,
            "users": [
              {
                "id": "$uuid",
                "alterId": 0,
                "security": "auto"
              }
            ]
          }
        ]
      },
      "streamSettings": {
        "network": "tcp",
        "sockopt": {
          "mark": 255,
          "tcpFastOpen": true,
          "tcpNoDelay": true
        }
      }
    }
EOF
`
else
OBdefault=`cat << EOF
{
      "tag": "default",
      "protocol": "vmess",
      "settings": {
        "vnext": [
          {
            "address": "$domain",
            "port": $port,
            "users": [
              {
                "id": "$uuid",
                "alterId": 0,
                "security": "auto"
              }
            ]
          }
        ]
      },
      "streamSettings": {
        "network": "ws",
        "wsSettings": {
          "path": "$path",
          "headers": {
            "Host": "$tls"
          }
        },
        "security": "tls",
        "tlsSettings": {
          "serverName": "$tls",
          "allowInsecure": false
        },
        "sockopt": {
          "mark": 255,
          "tcpFastOpen": true,
          "tcpNoDelay": true
        }
      }
}
EOF
`
fi

jq --argjson OBdefault "$OBdefault" '.outbounds[0]=$OBdefault' /opt/de_GWD/vtrui/config.json | sponge /opt/de_GWD/vtrui/config.json

rm -rf /lib/systemd/system/vtrui.service
cat << EOF >/etc/systemd/system/vtrui.service
[Unit]
Description=vtrui
After=network.target nss-lookup.target

[Service]
User=root
ExecStart=/opt/de_GWD/vtrui/vtrui run -confdir /opt/de_GWD/vtrui
Restart=on-failure
RestartPreventExitStatus=23

Nice=-9
AmbientCapabilities=CAP_NET_RAW CAP_NET_ADMIN CAP_NET_BIND_SERVICE
CapabilityBoundingSet=CAP_NET_RAW CAP_NET_ADMIN CAP_NET_BIND_SERVICE
NoNewPrivileges=true

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload >/dev/null
systemctl restart vtrui
if [[ $? -ne 0 ]]; then
sed -i '/Nice=/d' /etc/systemd/system/vtrui.service
systemctl daemon-reload >/dev/null
systemctl restart vtrui
fi
systemctl enable vtrui >/dev/null 2>&1

echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}Deploy vtrui${cRES}"
}



installNftables(){
echo -e "${WHITE}[...]\c" && echo -e "\t${WHITE}Deploy nftables${cRES}\r\c"
cat << EOF >/etc/network/interfaces
source /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto $ethernetnum
iface $ethernetnum inet static
    address $localAddrCIDR
    gateway $gatewayAddr
EOF

rm -rf /etc/nftables*
rm -rf /opt/de_GWD/nftables
mkdir -p /opt/de_GWD/nftables
echo $DoGcIP $doh1IP $doh2IP | xargs -n1 | sort | uniq | sed 's/$/,/g' >/opt/de_GWD/nftables/IP_GlobalDNS
cat << EOF >/opt/de_GWD/nftables/SET_GlobalDNS.nft
#!/usr/sbin/nft -f
table ip de_GWD {
        set GlobalDNS {
                type ipv4_addr
                flags interval
                auto-merge
                elements = { $(cat /opt/de_GWD/nftables/IP_GlobalDNS) }
        }
}
EOF
chmod +x /opt/de_GWD/nftables/SET_GlobalDNS.nft
/opt/de_GWD/nftables/SET_GlobalDNS.nft

cat << EOF >/opt/de_GWD/nftables/SET_V2NODE.nft
#!/usr/sbin/nft -f
table ip de_GWD {
        set V2NODE {
                type ipv4_addr
                flags interval
                auto-merge
                elements = { $domainIP }
        }
}
EOF
chmod +x /opt/de_GWD/nftables/SET_V2NODE.nft
/opt/de_GWD/nftables/SET_V2NODE.nft

if [[ $(du -sk /opt/de_GWD/.repo/IPchnroute 2>/dev/null | awk '{print$1}') -gt 100 ]]; then
cp -f /opt/de_GWD/.repo/IPchnroute /opt/de_GWD/nftables/IP_CHNROUTE
sed -i '/^\s*$/d' /opt/de_GWD/nftables/IP_CHNROUTE
sed -i 's/$/,/g' /opt/de_GWD/nftables/IP_CHNROUTE
fi

[[ -n $(cat /opt/de_GWD/nftables/IP_CHNROUTE 2>&1 | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') ]] && IP_CHNROUTE_elements="elements = { $(cat /opt/de_GWD/nftables/IP_CHNROUTE) }"
cat << EOF >/opt/de_GWD/nftables/SET_CHNROUTE.nft
#!/usr/sbin/nft -f
table ip de_GWD {
        set CHNROUTE {
                type ipv4_addr
                flags interval
                auto-merge
                $IP_CHNROUTE_elements
        }
}
EOF
chmod +x /opt/de_GWD/nftables/SET_CHNROUTE.nft
/opt/de_GWD/nftables/SET_CHNROUTE.nft

[[ -n $(cat /opt/de_GWD/nftables/IP_listB 2>&1 | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') ]] && IP_listB_elements="elements = { $(cat /opt/de_GWD/nftables/IP_listB) }"
cat << EOF >/opt/de_GWD/nftables/SET_listB.nft
#!/usr/sbin/nft -f
table ip de_GWD {
        set listB {
                type ipv4_addr
                flags interval
                auto-merge
                $IP_listB_elements
        }
}
EOF
chmod +x /opt/de_GWD/nftables/SET_listB.nft
/opt/de_GWD/nftables/SET_listB.nft

[[ -n $(cat /opt/de_GWD/nftables/IP_listW 2>&1 | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') ]] && IP_listW_elements="elements = { $(cat /opt/de_GWD/nftables/IP_listW) }"
cat << EOF >/opt/de_GWD/nftables/SET_listW.nft
#!/usr/sbin/nft -f
table ip de_GWD {
        set listW {
                type ipv4_addr
                flags interval
                auto-merge
                $IP_listW_elements
        }
}
EOF
chmod +x /opt/de_GWD/nftables/SET_listW.nft
/opt/de_GWD/nftables/SET_listW.nft

[[ -n $(cat /opt/de_GWD/nftables/IP_listBlan 2>&1 | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') ]] && IP_listBlan_elements="elements = { $(cat /opt/de_GWD/nftables/IP_listBlan) }"
cat << EOF >/opt/de_GWD/nftables/SET_listBlan.nft
#!/usr/sbin/nft -f
table ip de_GWD {
        set listBlan {
                type ipv4_addr
                flags interval
                auto-merge
                $IP_listBlan_elements
        }
}
EOF
chmod +x /opt/de_GWD/nftables/SET_listBlan.nft
/opt/de_GWD/nftables/SET_listBlan.nft

[[ -n $(cat /opt/de_GWD/nftables/IP_listWlan 2>&1 | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') ]] && IP_listWlan_elements="elements = { $(cat /opt/de_GWD/nftables/IP_listWlan) }"
cat << EOF >/opt/de_GWD/nftables/SET_listWlan.nft
#!/usr/sbin/nft -f
table ip de_GWD {
        set listWlan {
                type ipv4_addr
                flags interval
                auto-merge
                $IP_listWlan_elements
        }
}
EOF
chmod +x /opt/de_GWD/nftables/SET_listWlan.nft
/opt/de_GWD/nftables/SET_listWlan.nft



cat << "EOF" >/opt/de_GWD/nftables/flowtable_eth.sh
#!/bin/bash
interface_FT=$(find /sys/class/net ! -type d | xargs --max-args=1 realpath | grep 'device' | awk -F'/' '{print$NF}' | xargs -n1 | grep -v '^lo$' | grep -v '^ifb4lo$')

interface_BF=()
while IFS= read -r line; do
    interface_BF+=("$line")
done <<< "$interface_FT"

echo "define flowtable_eth = { $(IFS=, ; echo "${interface_BF[*]}") };" >/opt/de_GWD/nftables/flowtable.eth
EOF
chmod +x /opt/de_GWD/nftables/flowtable_eth.sh

cat << EOF >/opt/de_GWD/nftables/default.nft
#!/usr/sbin/nft -f
table inet filter {
        chain INPUT {
                type filter hook input priority 0; policy accept;
                iifname lo accept
                iifname "wg0" accept
                iifname "docker0" accept
                iifname "ifb4lo" accept
                iifname "ifb4wg0" accept
                ct state established,related accept
                tcp flags != syn ct state new drop
                tcp flags & (fin|syn) == (fin|syn) drop
                tcp flags & (syn|rst) == (syn|rst) drop
                tcp flags & (fin|syn|rst|psh|ack|urg) == 0 drop
                tcp flags & (fin|psh|urg) == (fin|psh|urg) drop
                ct state invalid counter drop
                # Drop 53 in
        }
        chain FORWARD {
                type filter hook forward priority 0; policy accept;
                # WireGuard traffic
                iifname "ifb4wg0" accept
                iifname "wg0" accept
                oifname "wg0" accept

                # Docker traffic
                counter jump DOCKER-USER
                counter jump DOCKER-ISOLATION-STAGE-1
                oifname "docker0" ct state related,established counter accept
                oifname "docker0" counter jump DOCKER
                iifname "docker0" oifname != "docker0" counter accept
                iifname "docker0" oifname "docker0" counter accept
        }
        chain OUTPUT {
                type filter hook output priority 0; policy accept;
        }
        chain DOCKER {
        }
        chain DOCKER-USER {
                counter accept
        }
        chain DOCKER-ISOLATION-STAGE-1 {
                iifname "docker0" oifname != "docker0" counter jump DOCKER-ISOLATION-STAGE-2
                counter return
        }
        chain DOCKER-ISOLATION-STAGE-2 {
                oifname "docker0" counter drop
                counter return
        }
}

table inet router {
        chain DOCKER {
                iifname "docker0" counter accept
        }
        chain INPUT {
                type nat hook input priority -100; policy accept;
        }
        chain OUTPUT {
                type nat hook output priority -100; policy accept;
                ip daddr != 127.0.0.0/8 fib daddr type local counter jump DOCKER
        }
        chain PREROUTING {
                type nat hook prerouting priority dstnat; policy accept;
                tcp flags & (syn|rst) == syn counter tcp option maxseg size set 1460
                # Docker
                fib daddr type local counter jump DOCKER
        }
        chain POSTROUTING {
                type nat hook postrouting priority srcnat; policy accept;
                # Wireguard masquerade traffic
                oifname $ethernetnum ip saddr 172.16.66.0/24 masquerade

                # Docker
                oifname != "docker0" ip saddr 172.17.0.0/16 counter masquerade
        }
}
EOF
chmod +x /opt/de_GWD/nftables/default.nft

cat << EOF >/opt/de_GWD/nftables/flowtable.nft
#!/usr/sbin/nft -f
include "/opt/de_GWD/nftables/flowtable.eth"

table inet bypassflow {
    flowtable Acceleration {
        hook ingress priority -300; devices = \$flowtable_eth;
    }

    chain bypasschain {
        type filter hook forward priority -300; policy accept;
        ip daddr 172.16.66.0/24 flow offload @Acceleration
        ip saddr 172.16.66.0/24 flow offload @Acceleration
        ip daddr 172.17.00.0/16 flow offload @Acceleration
        ip saddr 172.17.00.0/16 flow offload @Acceleration
    }
}
EOF

cat << EOF >/opt/de_GWD/nftables/nftables
#!/usr/sbin/nft -f

include "/opt/de_GWD/nftables/*.nft"

define RESERVED_IP = {
        $localCIDR,
        10.0.0.0/8,
        100.64.0.0/10,
        127.0.0.0/8,
        169.254.0.0/16,
        172.16.0.0/12,
        192.0.0.0/24,
        192.168.0.0/16,
        224.0.0.0/4,
        240.0.0.0/4,
        255.255.255.255/32,
        114.114.114.114/32,
        114.114.115.115/32,
        119.29.29.29/32,
        119.28.28.28/32,
        180.76.76.76/32,
        223.5.5.5/32,
        223.6.6.6/32
}

table ip de_GWD {
        set CHNROUTE {
                type ipv4_addr
                flags interval
                auto-merge
        }
        set GlobalDNS {
                type ipv4_addr
                flags interval
                auto-merge
        }
        set V2NODE {
                type ipv4_addr
                flags interval
                auto-merge
        }
        set listB {
                type ipv4_addr
                flags interval
                auto-merge
        }
        set listW {
                type ipv4_addr
                flags interval
                auto-merge
        }
        set listBlan {
                type ipv4_addr
                flags interval
                auto-merge
        }
        set listWlan {
                type ipv4_addr
                flags interval
                auto-merge
        }
        chain prerouting {
                type filter hook prerouting priority -280; policy accept;
                meta l4proto udp th dport { 53, 5331, 5332, 5341, 9896, 67, 68, 1900, 5350, 5351, 5353 } accept
                meta l4proto tcp th dport { 53, 5331, 5332, 5341, 9896, 2195, 2196, 2197, 3689, 5223, 5297 } accept
                ip daddr @GlobalDNS accept
                ip saddr @listBlan meta l4proto { tcp, udp } tproxy to 127.0.0.1:9896 meta mark set 0x9
                ip saddr @listWlan accept
                ip daddr \$RESERVED_IP accept
                ip daddr @listB meta l4proto { tcp, udp } tproxy to 127.0.0.1:9896 meta mark set 0x9
                ip daddr @listW accept
                ip daddr @V2NODE accept
                ip daddr @CHNROUTE accept
                ip protocol { tcp, udp } tproxy to 127.0.0.1:9896 meta mark set 0x9
        }
        chain output {
                type route hook output priority -280; policy accept;
                meta l4proto udp th dport { 53, 5331, 5332, 5341, 9896, 67, 68, 1900, 5350, 5351, 5353 } accept
                meta l4proto tcp th dport { 53, 5331, 5332, 5341, 9896, 2195, 2196, 2197, 3689, 5223, 5297 } accept
                meta mark 0xff accept
                ip daddr @GlobalDNS accept
                ip daddr \$RESERVED_IP accept
                ip daddr @listB meta mark set 0x9
                ip daddr @listW accept
                ip daddr @V2NODE accept
                ip daddr @CHNROUTE accept
                ip protocol { tcp, udp } meta mark set 0x9
        }
}
EOF
chmod +x /opt/de_GWD/nftables/nftables

rm -rf /lib/systemd/system/nftables.service
cat << EOF >/etc/systemd/system/nftables.service
[Unit]
Description=nftables
Wants=network-pre.target
Before=network-pre.target shutdown.target
Conflicts=shutdown.target
DefaultDependencies=no

[Service]
Type=oneshot
RemainAfterExit=yes
StandardInput=null
ProtectSystem=full
ProtectHome=true
ExecStart=/bin/bash -c '/etc/rc_online.local' ; /bin/bash -c '/opt/de_GWD/nftables/flowtable_eth.sh' ; /usr/sbin/nft -f /opt/de_GWD/nftables/nftables ; $(which ip) route add local default dev lo scope host table 220 ; $(which ip) rule add fwmark 0x9 table 220 prio 100
ExecStop=/usr/sbin/nft flush ruleset ; $(which ip) rule del table 220 ; $(which ip) route del local default dev lo table 220

[Install]
WantedBy=sysinit.target
EOF
systemctl daemon-reload >/dev/null
systemctl enable nftables >/dev/null 2>&1
systemctl restart nftables

if [[ $(systemctl is-active 'nftables') != "active" ]]; then
  systemctl restart nftables
  if [[ $? -ne 0 ]]; then
  rm -rf /opt/de_GWD/nftables/flowtable.nft >/dev/null 2>&1
  systemctl restart nftables
  fi
fi

echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}Deploy nftables${cRES}"
}



updateAPT(){
echo -e "${WHITE}[...]\c" && echo -e "\t${WHITE}Debian Updated${cRES}\r\c"
cat << EOF >/etc/apt/sources.list
deb http://cloudfront.debian.net/debian bookworm main contrib non-free non-free-firmware
deb http://cloudfront.debian.net/debian-security bookworm-security main contrib non-free non-free-firmware
deb http://cloudfront.debian.net/debian bookworm-updates main contrib non-free non-free-firmware
deb http://cloudfront.debian.net/debian bookworm-backports main contrib non-free non-free-firmware
EOF

echo "deb [signed-by=/etc/apt/keyrings/deb.sury.org.gpg] https://packages.sury.org/php/ $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1) main" >/etc/apt/sources.list.d/php.list
apt-key del 95BD4743 >/dev/null 2>&1
curl -sSLo /etc/apt/keyrings/deb.sury.org.gpg https://packages.sury.org/php/apt.gpg
[[ $? -ne 0 ]] && echo -e "${WHITE}PHP apt key${RED} Download Failed${cRES}"

apt update --fix-missing && apt upgrade --allow-downgrades -y
apt full-upgrade -y && apt autoremove --purge -y && apt clean -y && apt autoclean -y

echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}Debian ${GREEN}Updated${cRES}"
}



installDep(){
echo -e "${WHITE}[...]\c" && echo -e "\t${WHITE}Dependencies${cRES}\r\c"
sed -i "/www-data/d" /etc/sudoers
sed -i "/Allow members of group sudo to execute any command/a\www-data ALL=(root)  NOPASSWD:ALL" /etc/sudoers

pkgDEP1

pkgDEP2

DPKGclean=$(dpkg --list | grep "^rc" | cut -d " " -f 3)
[[ -n $DPKGclean ]] && echo $DPKGclean | xargs sudo dpkg --purge

rm -rf /var/log/journal/*
systemctl restart systemd-journald >/dev/null 2>&1

if [[ -d "/usr/local/ioncube" ]]; then
echo "zend_extension = /usr/local/ioncube/ioncube_loader_lin_7.4.so" >/etc/php/7.4/mods-available/ioncube.ini
ln -sf /etc/php/7.4/mods-available/ioncube.ini /etc/php/7.4/fpm/conf.d/00-ioncube.ini
ln -sf /etc/php/7.4/mods-available/ioncube.ini /etc/php/7.4/cli/conf.d/00-ioncube.ini
fi

sed -i "/zend_extension/d" /etc/php/7.4/cli/php.ini
sed -i "/zend_extension/d" /etc/php/7.4/fpm/php.ini
sed -i "s/^opcache/;&/" /etc/php/7.4/cli/php.ini
sed -i "s/^opcache/;&/" /etc/php/7.4/fpm/php.ini

cat << EOF >/etc/php/00-init.ini
expose_php              = Off
error_reporting         = E_ALL & ~E_NOTICE
display_errors          = Off
display_startup_errors  = Off
log_errors              = On
ignore_repeated_errors  = Off

allow_url_fopen         = On
allow_url_include       = Off
variables_order         = "GPCS"
allow_webdav_methods    = On
memory_limit            = 128M
max_execution_time      = 1200
max_input_time          = 30
max_input_vars          = 5000
output_buffering        = Off
output_handler          = ""
zlib.output_compression = Off
zlib.output_handler     = ""
safe_mode               = Off
register_globals        = Off
magic_quotes_gpc        = Off
date.timezone           = "Asia/Shanghai"

file_uploads            = On
upload_tmp_dir          = "/tmp/"
upload_max_filesize     = 20M
post_max_size           = 20M

engine                  = off
enable_dl               = Off
disable_functions       = ""
disable_classes         = ""

session.save_handler     = files
session.use_cookies      = 1
session.use_only_cookies = 1
session.auto_start       = 0
session.cookie_lifetime  = 0
session.cookie_httponly  = 1
session.cookie_secure    = 1
EOF
ln -sf /etc/php/00-init.ini /etc/php/7.4/cli/conf.d/00-init.ini
ln -sf /etc/php/00-init.ini /etc/php/7.4/fpm/conf.d/00-init.ini

rm -rf /etc/php/7.4/fpm/pool.d
cat << EOF >/etc/php/7.4/fpm/php-fpm.conf
[global]
pid = /run/php/php7.4-fpm.pid
error_log = /var/log/php.log

[www]
user = www-data
group = www-data
listen.owner = www-data
listen.group = www-data
listen.mode = 0666
listen = /run/php/php7.4-fpm.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1

pm = dynamic
pm.max_children = 30
pm.start_servers = 10
pm.min_spare_servers = 5
pm.max_spare_servers = 20
pm.max_requests = 500
request_terminate_timeout = 300
request_slowlog_timeout = 0

env[HOSTNAME] = \$HOSTNAME
env[PATH] = /usr/local/bin:/usr/bin:/bin
env[TMP] = /tmp
env[TEMP] = /tmp
env[TMPDIR] = /tmp
EOF

cat << EOF >/etc/php/7.4/mods-available/opcache.ini
; configuration for php opcache module
; priority=10
zend_extension=opcache.so
opcache.enable=1
opcache.enable_cli=1
opcache.jit = off
opcache.jit_buffer_size=128M
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.validate_timestamps=1
opcache.revalidate_freq=60
opcache.fast_shutdown=1
opcache.save_comments=1
EOF

rm -rf /var/log/php.log
rm -rf /run/php7.4-fpm.pid
rm -rf /lib/systemd/system/php7.4-fpm.service
cat << EOF >/etc/systemd/system/php7.4-fpm.service
[Unit]
Description=The PHP 7.4 FastCGI Process Manager
After=network.target

[Service]
Type=simple
PIDFile=/run/php7.4-fpm.pid
ExecStartPre=/usr/bin/touch /var/log/php.log
ExecStart=/usr/sbin/php-fpm7.4 --nodaemonize --fpm-config /etc/php/7.4/fpm/php-fpm.conf
ExecReload=$(which kill) -USR2 \$MAINPID
Restart=always
RestartSec=2
TimeoutStopSec=5

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload >/dev/null
systemctl enable php7.4-fpm >/dev/null 2>&1
systemctl restart php7.4-fpm

echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}Dependencies${cRES}"
}



installNginx(){
echo -e "${WHITE}[...]\c" && echo -e "\t${WHITE}Nginx${cRES}\r\c"
mkdir -p "/var/www/html"
mkdir -p "/var/www/ssl"
mkdir -p "/etc/nginx"
mkdir -p "/etc/nginx/conf.d"
mkdir -p "/etc/nginx/stream.d"
mkdir -p "/var/log/nginx"
mkdir -p "/var/cache/nginx/client_temp"
mkdir -p "/var/cache/nginx/proxy_temp"
mkdir -p "/var/cache/nginx/fastcgi_temp"
mkdir -p "/var/cache/nginx/scgi_temp"
mkdir -p "/var/cache/nginx/uwsgi_temp"

if [[ -n $(unzip -tq /opt/de_GWD/.repo/nginxConf.zip | grep "No errors detected in compressed data") ]]; then
rm -rf /tmp/nginxConf
find /etc/nginx/ -type f | grep -v "conf.d" | grep -v "stream.d" | xargs -i rm {}
unzip /opt/de_GWD/.repo/nginxConf.zip -d /etc/nginx >/dev/null
rm -rf /tmp/nginxConf
else
rm -rf /opt/de_GWD/.repo/nginxConf.zip
echo -e "${WHITE}NGINX Configure${RED} Download Failed${cRES}" && exit
fi

rm -rf /tmp/nginx
rm -rf /lib/systemd/system/nginx.service
cat << EOF >/etc/systemd/system/nginx.service
[Unit]
Description=NGINX
After=network.target

[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf
ExecReload=/usr/sbin/nginx -s reload
ExecStop=$(which kill) -s QUIT \$MAINPID
KillMode=process
Restart=always
RestartSec=2
TimeoutStopSec=5

[Install]
WantedBy=multi-user.target
EOF
mkdir -p "/etc/systemd/system/nginx.service.d"
printf "[Service]\nExecStartPost=/bin/sleep 0.1\n" >/etc/systemd/system/nginx.service.d/override.conf
systemctl daemon-reload >/dev/null
systemctl enable nginx >/dev/null 2>&1

[[ ! -f "/var/www/ssl/dhparam.pem" ]] && openssl dhparam -out /var/www/ssl/dhparam.pem 2048
}



nginxSet(){
if [[ ! -f "/var/www/ssl/de_GWD.cer" ]] || [[ ! -f "/var/www/ssl/de_GWD.key" ]]; then
cd /var/www/ssl
openssl req -x509 -nodes -days 3650 \
  -subj "/C=CA/ST=QC/O=Company, Inc./CN=localhost.com" \
  -config <(cat /etc/ssl/openssl.cnf \
    <(printf '[SAN]\nsubjectAltName=DNS:localhost')) \
  -newkey rsa:2048 \
  -keyout de_GWD.key \
  -out de_GWD.cer
cd ~
fi

[[ -z $serverName ]] && serverName="de_GWD"

[[ -z $(echo $webUIport | grep '^[[:digit:]]*$') ]] && webUIport="443"
jq --arg webUIport $webUIport '.address.webUIport=$webUIport' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf

if [[ $webUIport = 443 ]]; then
cat << EOF >/etc/nginx/conf.d/80.conf
server {
  listen 80 reuseport;
  server_name $serverName;
  return 301 https://\$host\$request_uri;
}
EOF
else
rm -rf /etc/nginx/conf.d/80.conf
fi

touch /etc/nginx/conf.d/default.conf
sed -i '/SERVER_BASE_START/,/SERVER_BASE_END/d' /etc/nginx/conf.d/default.conf
sed -i '/PHP_START/,/PHP_END/d' /etc/nginx/conf.d/default.conf
sed -i '/Pihole_START/,/Pihole_END/d' /etc/nginx/conf.d/default.conf
sed -i '/TTYD_START/,/TTYD_END/d' /etc/nginx/conf.d/default.conf
sed -i '/NETDATA_START/,/NETDATA_END/d' /etc/nginx/conf.d/default.conf
sed -i '$s/}$//' /etc/nginx/conf.d/default.conf

until [[ $(head -1 /etc/nginx/conf.d/default.conf | cat -e) != "$" ]]; do
   sed -i '1d' /etc/nginx/conf.d/default.conf
done

until [[ $(tail -1 /etc/nginx/conf.d/default.conf | cat -e) != "$" ]]; do
   sed -i '$d' /etc/nginx/conf.d/default.conf
done

cat << EOF >/etc/nginx/conf.d/.HSTS
add_header X-Download-Options                 "noopen"            always;
add_header X-Permitted-Cross-Domain-Policies  "none"              always;
add_header X-Robots-Tag                       "none"              always;

add_header Strict-Transport-Security          "max-age=31536000; includeSubDomains; preload";
add_header X-XSS-Protection                   "1; mode=block"     always;
add_header X-Frame-Options                    "SAMEORIGIN"        always;
add_header X-Content-Type-Options             "nosniff"           always;
EOF

cat << EOF >/etc/nginx/conf.d/.ssl_certs
ssl_certificate /var/www/ssl/de_GWD.cer;
ssl_certificate_key /var/www/ssl/de_GWD.key;
ssl_dhparam /var/www/ssl/dhparam.pem;
ssl_protocols TLSv1.3;
ssl_prefer_server_ciphers on;
ssl_ecdh_curve X25519:secp384r1;
ssl_conf_command Options KTLS;
ssl_conf_command Ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;
ssl_session_tickets off;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 6h;
ssl_buffer_size 4k;
ssl_early_data on;
proxy_set_header Early-Data \$ssl_early_data;
EOF

cat << EOF >/etc/nginx/conf.d/default.conf
# SERVER_BASE_START
server {
  listen $webUIport default ssl fastopen=500 reuseport;
  http2 on;
  server_name $serverName;
  root /var/www/html;
  index index.php index.html index.htm;
  error_page 497 https://\$host:$webUIport\$request_uri;

  include /etc/nginx/conf.d/.HSTS;

  add_header Referrer-Policy                    "origin"            always;
  add_header Pragma                             "no-cache"          always;

  include /etc/nginx/conf.d/.ssl_certs;

# SERVER_BASE_END

# Pihole_START
location /admin/ {
    proxy_pass http://127.0.0.1:8053/admin/;
    proxy_set_header Host \$host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_hide_header X-Frame-Options;
    proxy_set_header X-Frame-Options "SAMEORIGIN";
    proxy_read_timeout 90;
}

location /api/ {
    proxy_pass http://127.0.0.1:8053/api/;
    proxy_set_header Host \$host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_hide_header X-Frame-Options;
    proxy_set_header X-Frame-Options "SAMEORIGIN";
    proxy_read_timeout 90;
}
# Pihole_END


# PHP_START
location ~ [^/]\.php(/|$) {
  fastcgi_split_path_info ^(.+?\.php)(/.*)$;
  if (!-f \$document_root\$fastcgi_script_name) {
      return 404;
  }

  include               fastcgi_params;
  fastcgi_param         SCRIPT_FILENAME   \$document_root\$fastcgi_script_name;
  fastcgi_pass          unix:/run/php/php7.4-fpm.sock;
  fastcgi_index         index.php;
}
# PHP_END

# TTYD_START
location ~ ^/ttyd(.*)$ {
  proxy_pass                  http://127.0.0.1:3000/\$1;
  proxy_http_version          1.1;
  proxy_set_header            Host \$host;
  proxy_set_header            Upgrade \$http_upgrade;
  proxy_set_header            Connection "upgrade";
  proxy_set_header            X-Forwarded-Proto \$scheme;
  proxy_set_header            X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_read_timeout          1800s;
}
# TTYD_END

$(cat /etc/nginx/conf.d/default.conf 2>/dev/null)
}
EOF
sed -i '/ssl_trusted_certificate/d' /etc/nginx/conf.d/.ssl_certs
sed -i '/ssl_stapling/d' /etc/nginx/conf.d/.ssl_certs
sed -i '/ssl_stapling_verify/d' /etc/nginx/conf.d/.ssl_certs
sed -i '/ssl_stapling_file/d' /etc/nginx/conf.d/.ssl_certs
systemctl restart nginx >/dev/null 2>&1

echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}Nginx${cRES}"
}



installWebUI(){
rm -rf /tmp/ui-script
rm -rf /tmp/ui-web
unzip /opt/de_GWD/.repo/client.zip -d /tmp >/dev/null 2>&1

rm -rf /opt/de_GWD/ui-*
rm -rf /opt/de_GWD/ui_*
rm -rf /var/www/html/*.php
rm -rf /var/www/html/*.ico
rm -rf /var/www/html/act
rm -rf /var/www/html/vendor
rm -rf /var/www/html/css
rm -rf /var/www/html/js

mv -f /tmp/ui-script/* /opt/de_GWD >/dev/null
mv -f /tmp/ui-web/* /var/www/html >/dev/null

mkdir -p /var/www/html/restore
chown -R www-data:www-data /var/www/html
chmod -R +x /var/www/html
chmod +x /opt/de_GWD/*

if [[ $TTYD_UPDATE = "true" ]]; then
[[ -z $(echo $updatePort | grep '^[[:digit:]]*$') ]] && updatePort="3000"

rm -rf /lib/systemd/system/updateGWD.service
cat << EOF >/etc/systemd/system/updateGWD.service
[Unit]
Description=updateGWD
After=network.target

[Service]
User=root
Type=oneshot
ExecStartPre=/usr/bin/chmod +x /opt/de_GWD/update
ExecStart=/usr/bin/tmux new -ds 'updateGWD' /usr/bin/ttyd -p $updatePort -o /opt/de_GWD/update
KillMode=process

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload >/dev/null
fi

if [[ $(du -sk /var/www/html/spt 2>/dev/null | awk '{print$1}') -lt 102400 ]]; then
  dd if=/dev/zero of=/var/www/html/spt bs=1k count=100k status=progress
fi

cp -f /opt/de_GWD/.repo/version.php /var/www/html/act/version.php
}



pullpihole(){
echo -e "${WHITE}[...]\c" && echo -e "\t${WHITE}Install Pi-hole${cRES}\r\c"
docker pull pihole/pihole:latest
}



installPihole(){
docker rm -f pihole >/dev/null 2>&1
rm -rf "/etc/dnsmasq.d"
mkdir -p "/etc/dnsmasq.d"

if [[ -f "/opt/de_GWD/pihole/pihole.toml" ]]; then
piholePW=$(python3 <<EOF
import toml
with open("/opt/de_GWD/pihole/pihole.toml", "r") as f:
 data = toml.load(f)

print(f"{data['webserver']['api']['pwhash']}")
EOF
)
else
piholePW='$BALLOON-SHA256$v=1$s=1024,t=32$LwoqshC8cGQ60io+j+h3yQ==$/zfv150BWOgSihODqM1TDSJYydjRp4lH2mf9AOB3oe0='
fi

mkdir -p /opt/de_GWD/pihole
docker run -d \
--name=pihole \
--cap-add NET_RAW \
--cap-add NET_ADMIN \
--cap-add SYS_TIME \
--cap-add SYS_NICE \
--restart=always \
--net=host \
-v /etc/localtime:/etc/localtime \
-v /opt/de_GWD/pihole:/etc/pihole \
-v /etc/dnsmasq.d:/etc/dnsmasq.d \
pihole/pihole:latest

python3 <<EOF
import toml
with open("/opt/de_GWD/pihole/pihole.toml", "r") as f:
 data = toml.load(f)

data['webserver']['api']['pwhash'] = "$piholePW"

with open("/opt/de_GWD/pihole/pihole.toml", "w") as f:
    toml.dump(data, f)
EOF
}



piholeSet(){
systemctl disable --now dhcpcd >/dev/null 2>&1
systemctl mask --now dhcpcd >/dev/null 2>&1
systemctl daemon-reload >/dev/null

update-rc.d -f dhcpd remove >/dev/null 2>&1

python3 <<EOF
import toml
with open("/opt/de_GWD/pihole/pihole.toml", "r") as f:
 data = toml.load(f)

data["dns"]["port"] = 5399
data["dns"]["upstreams"] = ["127.0.0.1#5341","127.0.0.1#5341"]
data["dns"]["listeningMode"] = "ALL"
data["dns"]["EDNS0ECS"] = True
data["dns"]["showDNSSEC"] = True
data["dns"]["dnssec"] = False
data["dns"]["blocking"]["edns"] = "TEXT"
data["dns"]["domainNeeded"] = True
data["dns"]["rateLimit"]["count"] = 10000
data["dns"]["replyWhenBusy"] = "ALLOW"
data["webserver"]["port"] = "8053"
data["resolver"]["resolveIPv6"] = False
data["ntp"]["ipv4"]["active"] = False
data["ntp"]["ipv6"]["active"] = False
data["ntp"]["sync"]["active"] = False
data["ntp"]["sync"]["rtc"]["utc"] = False
data["dhcp"]["rapidCommit"] = True
data["dhcp"]["multiDNS"] = True
data["misc"]["etc_dnsmasq_d"] = True
data["misc"]["check"]["load"] = False

with open("/opt/de_GWD/pihole/pihole.toml", "w") as f:
    toml.dump(data, f)
EOF

chmod -R 777 /opt/de_GWD/pihole

cat << EOF >/etc/dnsmasq.d/00-extra.conf
dns-forward-max=10000
edns-packet-max=1280
all-servers
filter-AAAA
EOF

find /sys/class/net ! -type d | xargs --max-args=1 realpath | grep 'device' | grep -v 'veth' | awk -F'/' '{print$NF}' | xargs -I {} echo "interface={}" >/etc/dnsmasq.d/00-interface.conf

echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}Pi-hole Config ${cRES}"
}



postInstall(){
/opt/de_GWD/ui-NodeOne
/opt/de_GWD/ui_4am
/opt/de_GWD/ui_4h
systemctl restart smartdns
systemctl restart mosdns
if [[ $? -ne 0 ]]; then
sed -i '/Nice=/d' /etc/systemd/system/mosdns.service
systemctl daemon-reload >/dev/null
systemctl restart mosdns
fi
systemctl enable mosdns >/dev/null 2>&1

if [[ $(jq -r '.FORWARD.block53' /opt/de_GWD/0conf 2>/dev/null) = "on" ]]; then
  /opt/de_GWD/ui-block53on
fi
echo

python3 <<EOF
import toml
with open("/opt/de_GWD/pihole/pihole.toml", "r") as f:
 data = toml.load(f)

data["dns"]["port"] = 53

with open("/opt/de_GWD/pihole/pihole.toml", "w") as f:
    toml.dump(data, f)
EOF

docker restart pihole >/dev/null 2>&1

if [[ -n $(jq -r '.address.alias' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$') ]]; then
  /opt/de_GWD/ui-markThis >/dev/null 2>&1
fi

if [[ $(jq -r '.v2nodeDIV.nodeSM.status' /opt/de_GWD/0conf 2>/dev/null) = "on" ]]; then
  /opt/de_GWD/ui-NodeSM >/dev/null 2>&1
fi

if [[ $(jq -r '.v2nodeDIV.nodeCU.status' /opt/de_GWD/0conf 2>/dev/null) = "on" ]]; then
  /opt/de_GWD/ui-NodeCU >/dev/null 2>&1
fi

if [[ $(jq -r '.v2nodeDIV.nodeDT.status' /opt/de_GWD/0conf 2>/dev/null) = "on" ]]; then
  /opt/de_GWD/ui-NodeDT >/dev/null 2>&1
fi

echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}V2 Split${cRES}"

if [[ $(jq -r '.FORWARD.FWD1.status' /opt/de_GWD/0conf 2>/dev/null) = "on" ]];then
  /opt/de_GWD/ui-FWD1save >/dev/null 2>&1
fi

if [[ $(jq -r '.FORWARD.Rproxy.client.status' /opt/de_GWD/0conf 2>/dev/null) = "on" ]];then
  /opt/de_GWD/ui-RproxyCsave >/dev/null 2>&1
fi

if [[ $(jq -r '.FORWARD.Rproxy.server.status' /opt/de_GWD/0conf 2>/dev/null) = "on" ]];then
  /opt/de_GWD/ui-RproxySsave >/dev/null 2>&1
fi

systemctl restart mosdns
systemctl restart vtrui

/opt/de_GWD/ui_2h

cat << "EOF" >/etc/rc_kernel.local
#!/bin/bash
PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

rm -f /var/cache/apt/archives/lock
rm -f /var/lib/apt/lists/lock
rm -f /var/lib/dpkg/lock
rm -f /var/lib/dpkg/lock-frontend
dpkg --configure -a

dpkg --list | grep linux-image | awk '{print $2}' | grep -Fv $(uname -r) | while read line; do
apt autoremove --purge  -y $line
done

dpkg --list | grep linux-headers | awk '{print $2}' | grep -Fv $(uname -r) | while read line; do
apt autoremove --purge  -y $line
done
EOF
chmod +x /etc/rc_kernel.local


crontab -l 2>/dev/null >/tmp/now.cron
sed -i '/\/opt\/de_GWD\/ui_4am/d' /tmp/now.cron
sed -i '/\/opt\/de_GWD\/ui_4h/d' /tmp/now.cron
sed -i '/\/opt\/de_GWD\/ui_2h/d' /tmp/now.cron
sed -i '/\/opt\/de_GWD\/clearKernel/d' /tmp/now.cron
sed -i '/\/etc\/rc_.*/d' /tmp/now.cron
cat << EOF >>/tmp/now.cron
0 4 * * * /opt/de_GWD/ui_4am u
0 */4 * * * /opt/de_GWD/ui_4h
0 */2 * * * /opt/de_GWD/ui_2h
@reboot sleep 15 && /etc/rc_kernel.local
EOF
crontab /tmp/now.cron
rm -rf /tmp/now.cron
service cron restart

rm -rf /tmp/ui-script
rm -rf /tmp/ui-web
rm -rf /tmp/client.zip
rm -rf /opt/de_GWD/update

if [[ $(dpkg --list | grep linux-image | wc -l) != "1" ]]; then
echo -e "${WHITE}[ ${YELLOW}! ${WHITE}]\c" && echo -e "\t${YELLOW}Kernel updated${cRES}"
fi
}



installkernel(){
bash <(wget --show-progress -cqO- https://raw.githubusercontent.com/jacyl4/de_GWD/main/resource/kernel/installkernel)
}



clearPihole(){
rm -rf /opt/de_GWD/pihole/listsCache/*
>/opt/de_GWD/pihole/adlists.list
sqlite3 /opt/de_GWD/pihole/gravity.db "DELETE FROM adlist"
docker exec pihole pihole -g
docker exec pihole pihole --regex -d ".*;querytype=HTTPS"
docker restart pihole
}



changeWP(){
    echo -e "${GREEN}=========================== ${cRES}"
    echo -e "${GREEN} Web UI Port${cRES}"
    echo -e "${GREEN}=========================== ${cRES}"
    read webUIport

    echo -e "${GREEN}=========================== ${cRES}"
    echo -e "${GREEN} Web update Port${cRES}"
    echo -e "${GREEN}=========================== ${cRES}"
    read updatePort

serverName=$(jq -r '.address.serverName' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')

nginxSet
systemctl force-reload nginx >/dev/null

sed -i "/ExecStart=/c\ExecStart=/usr/bin/ttyd -p $updatePort -o /opt/de_GWD/update" /etc/systemd/system/updateGWD.service
systemctl daemon-reload >/dev/null

jq --arg updatePort $updatePort '.update.updatePort=$updatePort' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf

echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}Web UI Port & Web update Port ${GREEN}Updated${cRES}"
}



changePWD(){
    echo -e "${GREEN}=========================== ${cRES}"
    echo -e "${GREEN} New Password${cRES}"
    echo -e "${GREEN}=========================== ${cRES}"
    read newPW

docker exec pihole pihole setpassword "$newPW"

piholePW=$(php -r "echo hash('sha256', hash('sha256', '$newPW'));")
jq --arg piholePW "$piholePW" '.address.PWD = $piholePW' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
chmod 666 /opt/de_GWD/0conf

echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}Password ${GREEN}Changed${cRES}"
}



installGWD(){
    echo -e "${GREEN}=========================== ${cRES}"
    echo -e "${GREEN} de_GWD local IP address${cRES}"
    echo -e "${GREEN}=========================== ${cRES}"
    read localAddr

    echo -e "${GREEN}=========================== ${cRES}"
    echo -e "${GREEN} Upstream route IP address${cRES}"
    echo -e "${GREEN}=========================== ${cRES}"
    read gatewayAddr

    echo -e "${GREEN}=========================== ${cRES}"
    echo -e "${GREEN} DoH / DoG${cRES}"
    echo -e "${GREEN}=========================== ${cRES}"
    read DoGorDOH

    echo -e "${GREEN}=========================== ${cRES}"
    echo -e "${GREEN} V2 Address${cRES}"
    echo -e "${GREEN}=========================== ${cRES}"
    read v2addr
    
    echo -e "${GREEN}=========================== ${cRES}"
    echo -e "${GREEN} V2 UUID${cRES}"
    echo -e "${GREEN}=========================== ${cRES}"
    read uuid

    echo -e "${GREEN}=========================== ${cRES}"
    echo -e "${GREEN} V2 Path${cRES}"
    echo -e "${GREEN}=========================== ${cRES}"
    read path

ethernetnum=$(find /sys/class/net ! -type d | xargs --max-args=1 realpath | grep 'device' | xargs -n 1 | grep -v 'virtual' | grep -v 'ifb' | awk -F'/' '{print$NF}' | head -n1)
netmask=$(ip route | grep "$ethernetnum" | awk 'NR==2{print$1}' | sed -r 's/([0-9]{1,3}\.){3}[0-9]{1,3}//g')
localAddr=$(echo $localAddr | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')
localAddrCIDR=$(echo "$localAddr$netmask")
localCIDR="$(echo $localAddr | cut -d . -f1-3).0$netmask"

if [[ $DoGorDOH =~ "/" ]]; then
doh1=$DoGorDOH
else
DoG=$DoGorDOH
fi

domain=$(echo $v2addr | cut -d: -f1)
port=$(echo $v2addr | cut -d: -f2 | grep '^[[:digit:]]*$')
[[ -z $port ]] && port="443"
tls=$domain

rm -rf /etc/resolv.conf
cat << EOF >/etc/resolv.conf
nameserver 119.29.29.29
nameserver 180.76.76.76
nameserver 114.114.114.114
nameserver 223.5.5.5
EOF

if [[ $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1) = "stretch" ]]; then
cat << EOF >/etc/apt/sources.list
deb http://$chnAPTsource/debian buster main contrib non-free
deb http://$chnAPTsource/debian buster-updates main contrib non-free
deb http://$chnAPTsource/debian-security buster/updates main contrib non-free
EOF

sed -i "s/ stretch / buster /g" /etc/apt/sources.list.d/* >/dev/null 2>&1
apt update --fix-missing && apt upgrade --allow-downgrades -y
apt full-upgrade -y && apt autoremove --purge -y && apt clean -y && apt autoclean -y
fi

cat << EOF >/etc/apt/sources.list
deb http://$chnAPTsource/debian bookworm main contrib non-free non-free-firmware
deb http://$chnAPTsource/debian bookworm-updates main contrib non-free non-free-firmware
deb http://$chnAPTsource/debian bookworm-backports main contrib non-free non-free-firmware
deb http://$chnAPTsource/debian-security bookworm-security main contrib non-free non-free-firmware
EOF

sed -i "s/ buster / bookworm /g" /etc/apt/sources.list.d/* >/dev/null 2>&1
sed -i "s/ bullseye / bookworm /g" /etc/apt/sources.list.d/* >/dev/null 2>&1
apt update --fix-missing && apt upgrade --allow-downgrades -y
apt full-upgrade -y && apt autoremove --purge -y && apt clean -y && apt autoclean -y

preInstall

preConf

preDL

installSmartDNS

installXray

installNftables

echo "{}" >/opt/de_GWD/0conf
jq '.address={}' /opt/de_GWD/0conf |\
jq '.dns={}' |\
jq '.v2node=[]' |\
jq '.update={}' |\
jq --arg localIP "$localAddrCIDR" '.address.localIP=$localIP' |\
jq --arg upstreamIP "$gatewayAddr" '.address.upstreamIP=$upstreamIP' |\
jq --arg domain "$v2addr" '.v2node[0].domain=$domain' |\
jq --arg name "$v2addr" '.v2node[0].name=$name' |\
jq --arg uuid "$uuid" '.v2node[0].uuid=$uuid' |\
jq --arg path "$path" '.v2node[0].path=$path' |\
jq --arg updateAddr "$localAddr" '.update.updateAddr=$updateAddr' |\
jq --arg updatePort "3000" '.update.updatePort=$updatePort' |\
jq --arg updateCMD "$installCMD" '.update.updateCMD=$updateCMD' |\
jq --arg domain "$domain" '.update.v2node.domain=$domain' |\
jq --arg port "$port" '.update.v2node.port=$port' |\
jq --arg tls "$tls" '.update.v2node.tls=$tls' |\
jq --arg uuid "$uuid" '.update.v2node.uuid=$uuid' |\
jq --arg path "$path" '.update.v2node.path=$path' | sponge /opt/de_GWD/0conf
[[ -n $DoG ]] && jq --arg DoG "$DoG" '.dns.DoG=$DoG' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
[[ -n $doh1 ]] && jq --arg doh1 "$doh1" '.dns.doh+=[$doh1]' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
chmod 666 /opt/de_GWD/0conf

de_GWDconnect

updateAPT

apt --reinstall install ca-certificates

installDep

repoDL

installNginx

nginxSet

installWebUI

pullpihole

installPihole

piholeSet

postInstall

echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}de_GWD ${GREEN}Installed${cRES}"
}



updateGWD(){
[[ -f "/opt/de_GWD/version.php" ]] && echo -e "${RED}This is not client${cRES}" && exit

cleanDep

preUpdate

if [[ $1 = "auto" ]]; then
de_GWDconnect u a
else
de_GWDconnect u
fi

echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]\c" && echo -e "\t${WHITE}de_GWD ${GREEN}Updated${cRES}"
}



updateGWD_Green(){
repoDL

installDep

installNginx

nginxSet

installWebUI

preInstall

preConf

installSmartDNS

installXray

installNftables

pullpihole

installPihole

piholeSet

postInstall
}

updateGWD_Red(){
preInstall

preConf

preDL

installSmartDNS

installXray

installNftables

de_GWDconnect

updateAPT

installDep

repoDL

installNginx

nginxSet

installWebUI

pullpihole

installPihole

piholeSet

postInstall
}



serverStatus(){
echo
if [[ $(systemctl is-active 'smartdns') = "active" ]]; then
  echo -e "${WHITE} SmartDNS       \c" && echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]${cRES}"
elif [[ ! -x "/opt/de_GWD/smartdns/smartdns" ]]; then
  echo -e "${WHITE} SmartDNS       \c" && echo -e "${WHITE}[ ${YELLOW}! ${WHITE}]${cRES}"
else
  echo -e "${WHITE} SmartDNS       \c" && echo -e "${WHITE}[ ${RED}✕ ${WHITE}]${cRES}"
fi

if [[ $(systemctl is-active 'mosdns') = "active" ]]; then
  echo -e "${WHITE} mosdns         \c" && echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]${cRES}"
elif [[ ! -x "/opt/de_GWD/mosdns/mosdns" ]]; then
  echo -e "${WHITE} mosdns         \c" && echo -e "${WHITE}[ ${YELLOW}! ${WHITE}]${cRES}"
else
  echo -e "${WHITE} mosdns         \c" && echo -e "${WHITE}[ ${RED}✕ ${WHITE}]${cRES}"
fi

if [[ $(docker inspect -f '{{.State.Running}}' pihole 2>/dev/null) = "true" ]]; then
  echo -e "${WHITE} Pi-hole        \c" && echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]${cRES}"
elif [[ ! -x "/usr/local/bin/pihole" ]]; then
  echo -e "${WHITE} Pi-hole        \c" && echo -e "${WHITE}[ ${YELLOW}! ${WHITE}]${cRES}"
else
  echo -e "${WHITE} Pi-hole        \c" && echo -e "${WHITE}[ ${RED}✕ ${WHITE}]${cRES}"
fi

if [[ $(systemctl is-active 'vtrui') = "active" ]]; then
  echo -e "${WHITE} Xray           \c" && echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]${cRES}"
elif [[ ! -x "/opt/de_GWD/vtrui/vtrui" ]]; then
  echo -e "${WHITE} Xray           \c" && echo -e "${WHITE}[ ${YELLOW}! ${WHITE}]${cRES}"
else
  echo -e "${WHITE} Xray           \c" && echo -e "${WHITE}[ ${RED}✕ ${WHITE}]${cRES}"
fi

if [[ $(systemctl is-active 'nginx') = "active" ]]; then
  echo -e "${WHITE} Nginx          \c" && echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]${cRES}"
elif [[ ! -x "/usr/sbin/nginx" ]]; then
  echo -e "${WHITE} Nginx          \c" && echo -e "${WHITE}[ ${YELLOW}! ${WHITE}]${cRES}"
else
  echo -e "${WHITE} Nginx          \c" && echo -e "${WHITE}[ ${RED}✕ ${WHITE}]${cRES}"
fi

if [[ $(systemctl is-active 'php7.4-fpm') = "active" ]]; then
  echo -e "${WHITE} php7.4-FPM     \c" && echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]${cRES}"
elif [ ! -f "/etc/php/7.4/fpm/php-fpm.conf" ]; then
  echo -e "${WHITE} php7.4-FPM     \c" && echo -e "${WHITE}[ ${YELLOW}! ${WHITE}]${cRES}"
else
  echo -e "${WHITE} php7.4-FPM     \c" && echo -e "${WHITE}[ ${RED}✕ ${WHITE}]${cRES}"
fi

if [[ -n $(crontab -l 2>&1 | grep "autoUpdate") ]] && [[ -f "/opt/de_GWD/autoUpdate" ]]; then
  echo -e "${WHITE} AutoUpdate     \c" && echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]${cRES}"
else
  echo -e "${WHITE} AutoUpdate     \c" && echo -e "${WHITE}[ ${WHITE}- ${WHITE}]${cRES}"
fi

echo -e "${WHITE}---------------------- ${cRES}"

if [[ $(du -sk /opt/de_GWD/.repo/geosite.dat 2>/dev/null | awk '{print$1}') -gt 3500 ]]; then
  echo -e "${WHITE} GeoSite        \c" && echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]${cRES}"
else
  echo -e "${WHITE} GeoSite        \c" && echo -e "${WHITE}[ ${RED}✕ ${WHITE}]${cRES}"
fi

if [[ $(du -sk /opt/de_GWD/.repo/geoip.dat 2>/dev/null | awk '{print$1}') -ge 8000 ]]; then
  echo -e "${WHITE} GeoIP          \c" && echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]${cRES}"
else
  echo -e "${WHITE} GeoIP          \c" && echo -e "${WHITE}[ ${RED}✕ ${WHITE}]${cRES}"
fi

if [[ $(du -sk /opt/de_GWD/nftables/IP_CHNROUTE 2>/dev/null | awk '{print$1}') -gt 100 ]]; then
  echo -e "${WHITE} ChnrouteIP     \c" && echo -e "${WHITE}[ ${GREEN}✓ ${WHITE}]${cRES}"
else
  echo -e "${WHITE} ChnrouteIP     \c" && echo -e "${WHITE}[ ${RED}✕ ${WHITE}]${cRES}"
fi
}



start_menu(){
serverStatus

 echo
 echo -e "${BLUE}---------------------------------------------------------------- ${cRES}"
 echo -e "${BLUE}Debian Version:                 $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1) ${cRES}"
 echo -e "${BLUE}Kernel:                         $(uname -r) ${cRES}"
 echo -e "${BLUE}---------------------------------------------------------------- ${cRES}"

 echo -e "${GREEN}============CLIENT============================================== ${cRES}"
 echo -e "${GREEN}       __         _______       ______  ${cRES}"
 echo -e "${GREEN}  ____/ /__      / ____/ |     / / __ \ ${cRES}"
 echo -e "${GREEN} / __  / _ \    / / __ | | /| / / / / / ${cRES}"
 echo -e "${GREEN}/ /_/ /  __/   / /_/ / | |/ |/ / /_/ /  ${cRES}"
 echo -e "${GREEN}\__,_/\___/____\____/  |__/|__/_____/   ${cRES}"
 echo -e "${GREEN}         /_____/                        ${cRES}"
 echo
 echo -e "${GREEN}Require: Debian (amd64 && arm64) ${cRES}"
 echo -e "${GREEN}Author:  JacyL4${cRES}"
 echo -e "${GREEN}================================================================ ${cRES}"
 echo
 echo -e "${GREEN}1. Install de_GWD${cRES}"
 echo -e "${GREEN}2. Install new kernel and reboot${cRES}"
echo -e "${YELLOW}3. Clear Pi-hole Subscribed lists${cRES}"
echo -e "${YELLOW}8. Change Web UI port & Web update port${cRES}"
echo -e "${YELLOW}9. Change de_GWD password${cRES}"
echo -e "${YELLOW}0. Update de_GWD${cRES}"
echo -e "${RED}CTRL+C EXIT${cRES}"
echo ""
read -p "Select:" num
    case "$num" in
    1)
    installGWD
    start_menu
    ;;
    2)
    installkernel
    start_menu
    ;;
    3)
    clearPihole
    start_menu
    ;;
    8)
    changeWP
    start_menu
    ;;
    9)
    changePWD
    start_menu
    ;;
    0)
    updateGWD
    start_menu
    ;;
    *)
    clear
    echo -e "${RED}Wrong number${cRES}"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu
