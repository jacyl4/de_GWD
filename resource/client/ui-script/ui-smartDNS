#!/bin/bash
RED='\E[1;31m'
GREEN='\E[1;32m'
YELLOW='\E[1;33m'
BLUE='\E[1;34m'
PURPLE='\E[1;35m'
CYAN='\E[1;36m'
WHITE='\E[1;37m'
cRES='\E[0m'



echo -e "${WHITE}[...]\c" && echo -e "\t${WHITE}SmartDNS action${cRES}\r\c"
doh1=$(jq -r '.dns.doh[0]' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
doh2=$(jq -r '.dns.doh[1]' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
DoG=$(jq -r '.dns.dog' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')

touch /opt/de_GWD/coredns/corefile
if [[ -n $DoG ]]; then
DoGcDomain=$(echo $DoG | cut -d: -f1)
DoGcIP=$(dig @127.0.0.1 $DoGcDomain -4p 5331 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | xargs -n 1 | awk NR==1)
DoGcPort=$(echo $DoG | cut -d: -f2 | grep '^[[:digit:]]*$')
fi

if [[ -n $DoGcIP ]]; then
sed -i '/DoGc_START/,/DoGc_END/d' /opt/de_GWD/coredns/corefile
tac /opt/de_GWD/coredns/corefile | awk 'NF>0{x=1}x' | tac | sponge /opt/de_GWD/coredns/corefile >/dev/null 2>&1
cat << EOF >>/opt/de_GWD/coredns/corefile
# DoGc_START
.:5333 {
bind 127.0.0.1
grpc . $DoGcIP:$DoGcPort {
  tls_servername $DoGcDomain
}
template ANY AAAA {
  rcode NXDOMAIN
}
reload 6s 3s
}
# DoGc_END
EOF

systemctl enable coredns >/dev/null 2>&1
systemctl restart coredns
else
sed -i '/DoGc_START/,/DoGc_END/d' /opt/de_GWD/coredns/corefile
  if [[ $(cat /opt/de_GWD/coredns/corefile | wc -l) -le 5 ]]; then
  systemctl disable coredns >/dev/null 2>&1
  systemctl stop coredns
  else
  systemctl restart coredns
  fi
fi

if [[ $(jq -r '.FORWARD.DoGs.status' /opt/de_GWD/0conf 2>/dev/null) = "on" ]];then
  /opt/de_GWD/ui-DoGsSave >/dev/null 2>&1
fi

if [[ -n $doh1 ]]; then
doh1Domain=$(echo $doh1 | cut -d/ -f1 | cut -d: -f1)
doh1IP=$(dig @127.0.0.1 $doh1Domain -4p 5331 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | xargs -n 1 | awk NR==1)
doh1Port=$(echo $doh1 | cut -d/ -f1 | cut -d: -f2 | grep '^[[:digit:]]*$')
doh1Path=$(echo $doh1 | cut -d/ -f2)

if [[ -z $doh1Port ]]; then
    doh1Str="$doh1IP/$doh1Path"
else
    doh1Str="$doh1IP:$doh1Port/$doh1Path"
fi
fi

if [[ -n $doh2 ]]; then
doh2Domain=$(echo $doh2 | cut -d/ -f1 | cut -d: -f1)
doh2IP=$(dig @127.0.0.1 $doh2Domain -4p 5331 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | xargs -n 1 | awk NR==1)
doh2Port=$(echo $doh2 | cut -d/ -f1 | cut -d: -f2 | grep '^[[:digit:]]*$')
doh2Path=$(echo $doh2 | cut -d/ -f2)

if [[ -z $doh2Port ]]; then
    doh2Str="$doh2IP/$doh2Path"
else
    doh2Str="$doh2IP:$doh2Port/$doh2Path"
fi
fi

cat << EOF >/opt/de_GWD/smartdns/smartdns.conf
server-name smartdns

bind 127.0.0.1:5331
bind-tcp 127.0.0.1:5331

bind 127.0.0.1:5332 -group DNS_global -no-speed-check -no-cache
bind-tcp 127.0.0.1:5332 -group DNS_global -no-speed-check -no-cache

speed-check-mode tcp:443,ping,tcp:80
response-mode first-ping
force-AAAA-SOA yes
dualstack-ip-selection no
cache-size 32768
cache-persist yes
cache-file /tmp/smartdns
cache-checkpoint-time 28800
prefetch-domain yes
serve-expired-prefetch-time 21600
rr-ttl 600
rr-ttl-min 60
rr-ttl-max 3600
local-ttl 60
serve-expired yes
serve-expired-ttl 3600
serve-expired-reply-ttl 3
EOF

if [[ -z $(jq -r '.dns.china' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$') ]]; then
  jq --arg dnsChina "114.114.114.114 114.114.115.115 119.29.29.29 119.28.28.28 180.76.76.76 223.5.5.5 223.6.6.6" '.dns.china=$dnsChina' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
  chmod 666 /opt/de_GWD/0conf
fi

for dnsChina in $(jq -r '.dns.china' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$'); do
    echo "server $dnsChina" >>/opt/de_GWD/smartdns/smartdns.conf
done


if [[ -n $doh1IP ]]; then
echo "server-https https://$doh1Str -host-name $doh1Domain -no-check-certificate -group DNS_global -exclude-default-group" >>/opt/de_GWD/smartdns/smartdns.conf
fi

if [[ -n $doh2IP ]]; then
echo "server-https https://$doh2Str -host-name $doh2Domain -no-check-certificate -group DNS_global -exclude-default-group" >>/opt/de_GWD/smartdns/smartdns.conf
fi

if [[ -n $DoGcIP ]]; then
echo "server-tcp 127.0.0.1:5333" >>/opt/de_GWD/smartdns/smartdns.conf
fi

doh1re_origin=$(jq -r '.dns.doh1re' /opt/de_GWD/0conf)
if [[ $doh1re_origin != $doh1IP ]]; then
jq --arg doh1re "$doh1IP" '.dns.doh1re=$doh1re' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
fi

doh2re_origin=$(jq -r '.dns.doh2re' /opt/de_GWD/0conf)
if [[ $doh2re_origin != $doh2IP ]]; then
jq --arg doh2re "$doh2IP" '.dns.doh2re=$doh2re' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
fi

if [[ $doh1re_origin != $doh1IP ]] || [[ $doh2re_origin != $doh2IP ]]; then
systemctl restart smartdns
fi

if [[ -n $DoGcIP ]] || [[ -n $doh1IP ]] || [[ -n $doh2IP ]]; then
echo $DoGcIP $doh1IP $doh2IP | xargs -n1 | sort | uniq | sed 's/$/,/g' >/opt/de_GWD/nftables/IP_GlobalDNS
nft flush set ip de_GWD GlobalDNS
cat << EOF >/opt/de_GWD/nftables/SET_GlobalDNS.nft
#!/usr/sbin/nft -f
table ip de_GWD {
        set GlobalDNS {
                type ipv4_addr
                flags interval
                auto-merge
                elements = { $(cat /opt/de_GWD/nftables/IP_GlobalDNS) }
        }
}
EOF
chmod +x /opt/de_GWD/nftables/SET_GlobalDNS.nft
/opt/de_GWD/nftables/SET_GlobalDNS.nft
fi
echo -e "${WHITE}[ ${GREEN}âœ“ ${WHITE}]\c" && echo -e "\t${WHITE}SmartDNS action${cRES}"